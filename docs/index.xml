<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Unofficial UCSC Student Guide â€“ How to Use This Guide</title><link>https://hilalmorrar.com/ucsc-guide/docs/</link><description>Recent content in How to Use This Guide on Unofficial UCSC Student Guide</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://hilalmorrar.com/ucsc-guide/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Debugging with GDB</title><link>https://hilalmorrar.com/ucsc-guide/docs/majorguides/computerscience/cprogramming/gdb/</link><pubDate>Wed, 13 Oct 2021 00:00:00 -0700</pubDate><guid>https://hilalmorrar.com/ucsc-guide/docs/majorguides/computerscience/cprogramming/gdb/</guid><description>
&lt;h1 id="prerequisites">Prerequisites&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>Compile with debug symbols. To do this, add the &lt;code>-g&lt;/code> flag when you compile.
For example, &lt;code>clang -g -o program.o program.c&lt;/code>. For convenience, add a target
to your makefile, i.e.:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="color:#000">debug&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">CFLAGS&lt;/span> += -&lt;span style="color:#000">g&lt;/span>
&lt;span style="color:#000">debug&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">all&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Launch GDB using &lt;code>./gdb --args&lt;/code> followed by the your normal method of
execution. For example, for a program named &lt;em>program&lt;/em> and one flag &lt;em>&amp;ndash;flag&lt;/em>,
run &lt;code>gdb --args ./program --flags&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Once inside GDB, the command &lt;code>run&lt;/code> will run your program.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="finding-segmentation-faults">Finding Segmentation Faults&lt;/h1>
&lt;p>First, run your program using GDB. When your program crashes, you should see
the exact line on which your program failed.&lt;/p>
&lt;p>For more information, use the &lt;code>backtrace&lt;/code> command. The stack trace should show
the path your program took during its execution. For example, if your program
crashes in the standard library&amp;rsquo;s &lt;code>strlen&lt;/code> function, there won&amp;rsquo;t be much
information there. Running &lt;code>backtrace&lt;/code> will show you the arguments passed to
the function and which function called &lt;code>strlen&lt;/code>.&lt;/p>
&lt;h1 id="example">Example&lt;/h1>
&lt;pre>&lt;code>$ gdb --args ./executable
Reading symbols from ./executable...
&lt;/code>&lt;/pre>&lt;p>GDB has read the executable. The &lt;code>(gdb)&lt;/code> prompt means anything typed is sent to
GDB, not to the shell.&lt;/p>
&lt;pre>&lt;code>(gdb) run
Starting program: /path/to/executable
Program received signal SIGSEGV, Segmentation fault.
0x000055555555512c in my_function (array=0x0) at ./segfault.c:4
4 return array[0];
&lt;/code>&lt;/pre>&lt;p>The program received a segmentation fault in the function &lt;code>my_function&lt;/code>. The
function has one argument, &lt;code>array=0x0&lt;/code> (i.e., NULL).This is the source of the
segmentation fault, since the code is attempting to access the 0th element of
NULL memory.&lt;/p>
&lt;pre>&lt;code>(gdb) backtrace
#0 0x000055555555512c in my_function (array=0x0) at ./segfault.c:4
#1 0x0000555555555150 in main () at ./segfault.c:9
(gdb)
&lt;/code>&lt;/pre>&lt;p>The function &lt;code>my_function&lt;/code> was called from the function &lt;code>main&lt;/code>.&lt;/p></description></item><item><title>Docs: Compilation</title><link>https://hilalmorrar.com/ucsc-guide/docs/majorguides/computerscience/cprogramming/compilation/</link><pubDate>Tue, 12 Oct 2021 00:00:00 -0700</pubDate><guid>https://hilalmorrar.com/ucsc-guide/docs/majorguides/computerscience/cprogramming/compilation/</guid><description>
&lt;p>This page describes how to compile C programs that are more complex than a single source file. We&amp;rsquo;ll cover how to split code across multiple files, how to compile those files, how to automate the build process using GNU Make, and how to make use of system libraries.&lt;/p>
&lt;p>You can follow along with this guide on your own computer. All you&amp;rsquo;ll need is familiarity with the command line and a C programming environment with recent versions of Clang and Make. I would recommend using Linux (either running on your computer, in a virtual machine, or in WSL2). These commands may also work on macOS if you install Clang and Make, but they will &lt;em>not&lt;/em> work on Windows if you don&amp;rsquo;t have a Linux environment.&lt;/p>
&lt;h2 id="our-program">Our program&lt;/h2>
&lt;p>To get started, create an empty directory to hold all the files that we create. The name doesn&amp;rsquo;t matter. Navigate into that directory and create the following C file called &lt;code>hypot.c&lt;/code>. This is the program that we will be working with. Given two side lengths of a right triangle, it calculates the length of the hypotenuse.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#8f5902;font-style:italic">// hypot.c
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// approximation of sqrt(x) for some values of x
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">unsigned&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">sqrts&lt;/span>&lt;span style="color:#000;font-weight:bold">[]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">};&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">unsigned&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">my_sqrt&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">unsigned&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">x&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">25&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">fprintf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">stderr&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;error: cannot take sqrt of %u&lt;/span>&lt;span style="color:#4e9a06">\n&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">exit&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">sqrts&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">double&lt;/span> &lt;span style="color:#000">my_hypot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">double&lt;/span> &lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">double&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">my_sqrt&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">void&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">double&lt;/span> &lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000">printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;side a: &amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">!&lt;/span>&lt;span style="color:#000">scanf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%lf&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">fprintf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">stderr&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;invalid input&lt;/span>&lt;span style="color:#4e9a06">\n&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;side b: &amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">!&lt;/span>&lt;span style="color:#000">scanf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%lf&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">fprintf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">stderr&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;invalid input&lt;/span>&lt;span style="color:#4e9a06">\n&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;c = %lf&lt;/span>&lt;span style="color:#4e9a06">\n&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">my_hypot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">));&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You may already know the command to compile this using Clang:&lt;/p>
&lt;pre>&lt;code>$ clang -Wall -Werror -Wextra -Wpedantic -o hypot hypot.c
&lt;/code>&lt;/pre>&lt;p>But what does every part of this mean? Clang, like most command line programs, lets you specify &lt;em>input files&lt;/em> (in this case, C files to compile) as well as &lt;em>flags&lt;/em> that modify its behavior. Each argument that isn&amp;rsquo;t part of a flag is interpreted as an input file. Let&amp;rsquo;s break down all the arguments:&lt;/p>
&lt;ul>
&lt;li>&lt;code>-Wall&lt;/code>, &lt;code>-Werror&lt;/code>, &lt;code>-Wextra&lt;/code>, &lt;code>-Wpedantic&lt;/code>: each of these enables a certain class of warnings. Together, they make Clang very strict. With these flags, compilation will often fail when issues are encountered that would normally only be treated as warnings.&lt;/li>
&lt;li>&lt;code>-o&lt;/code>, &lt;code>hypot&lt;/code>: the &lt;code>o&lt;/code> stands for &amp;ldquo;output,&amp;rdquo; and means that the next argument should be used as the output filename. This makes Clang save the executable file as &lt;code>hypot&lt;/code>, and prevents &lt;code>hypot&lt;/code> from being interpreted as an input filename.&lt;/li>
&lt;li>&lt;code>hypot.c&lt;/code>: this is the only input file.&lt;/li>
&lt;/ul>
&lt;p>The compilation should succeed without errors. Now you can run the program:&lt;/p>
&lt;pre>&lt;code>$ ./hypot
side a: 3
side b: 4
c = 5.000000
&lt;/code>&lt;/pre>&lt;p>It worked! But, as you might have noticed from the code, our calculation is extremely limitedâ€”the square root function only returns integer approximations for numbers between 0 and 25, and fails on any other numbers. Here&amp;rsquo;s an example:&lt;/p>
&lt;pre>&lt;code>$ ./hypot
side a: 2
side b: 2
c = 3.000000
&lt;/code>&lt;/pre>&lt;p>The side length should be âˆš8 â‰ˆ 2.828. We&amp;rsquo;re going to modify this program to:&lt;/p>
&lt;ul>
&lt;li>use the built-in math library&amp;rsquo;s &lt;code>sqrt&lt;/code> function&lt;/li>
&lt;li>move the &lt;code>my_hypot&lt;/code> function into another file&lt;/li>
&lt;li>automatically compile with all the right parameters when we run &lt;code>make&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="using-the-math-library">Using the math library&lt;/h2>
&lt;p>You may know that in order to call math functions like &lt;code>sqrt&lt;/code>, you need to do two things: put &lt;code>#include &amp;lt;math.h&amp;gt;&lt;/code> at the top of your file, and add &lt;code>-lm&lt;/code> to your compilation flags. What do these do?&lt;/p>
&lt;h3 id="header-files">Header files&lt;/h3>
&lt;p>Including a file with &lt;code>#include&lt;/code> inserts its contents at the position of the &lt;code>#include&lt;/code> statement, nothing more. Since &lt;code>&amp;lt;math.h&amp;gt;&lt;/code> uses angle brackets instead of quotes, the preprocessor (which is responsible for processing includes, among other things) looks for a file in the &lt;em>include path&lt;/em>, instead of the current directory. You can modify the include path, but the default (on Linux, at least) is &lt;code>/usr/include&lt;/code>. This means that we are including &lt;code>/usr/include/math.h&lt;/code>, a file that comes with the operating system. You can actually open and view this file! Sadly, it is full of macros and includes other files, so the actual declaration of &lt;code>sqrt&lt;/code> is not easy to find, but you can imagine that somewhere in that file is the declaration:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#204a87;font-weight:bold">double&lt;/span> &lt;span style="color:#000">sqrt&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">double&lt;/span> &lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>(Since the preprocessor processes includes recursively, as far as you are concerned, that declaration may as well actually be in &lt;code>/usr/include/math.h&lt;/code>. The fact that it isn&amp;rsquo;t is transparent to you.)&lt;/p>
&lt;p>Let&amp;rsquo;s change our program to use the system&amp;rsquo;s &lt;code>sqrt&lt;/code> function (to make this tutorial easier to follow, when you modify a file, I&amp;rsquo;ll specify what the complete contents should now be):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#8f5902;font-style:italic">// hypot.c
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// new line
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;lt;math.h&amp;gt;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// deleted: sqrts array and my_sqrt function
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">double&lt;/span> &lt;span style="color:#000">my_hypot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">double&lt;/span> &lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">double&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// modified
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">sqrt&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">void&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">double&lt;/span> &lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000">printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;side a: &amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">!&lt;/span>&lt;span style="color:#000">scanf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%lf&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">fprintf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">stderr&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;invalid input&lt;/span>&lt;span style="color:#4e9a06">\n&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;side b: &amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">!&lt;/span>&lt;span style="color:#000">scanf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%lf&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">fprintf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">stderr&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;invalid input&lt;/span>&lt;span style="color:#4e9a06">\n&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;c = %lf&lt;/span>&lt;span style="color:#4e9a06">\n&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">my_hypot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">));&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="linking-against-a-system-library">Linking against a system library&lt;/h3>
&lt;p>Let&amp;rsquo;s recompile:&lt;/p>
&lt;pre>&lt;code>$ clang -Wall -Wextra -Werror -Wpedantic hypot.c -o hypot
/usr/bin/ld: /tmp/hypot-1e886c.o: in function `my_hypot':
hypot.c:(.text+0x2b): undefined reference to `sqrt'
clang-12: error: linker command failed with exit code 1 (use -v to see invocation)
&lt;/code>&lt;/pre>&lt;p>Uh oh! The important part of this error is &lt;code>undefined reference to `sqrt'&lt;/code>. Remember that &lt;code>math.h&lt;/code> contains only the declaration of &lt;code>sqrt&lt;/code>. That essentially tells the compiler that there &lt;em>will be&lt;/em> a function available, called &lt;code>sqrt&lt;/code>, returning a &lt;code>double&lt;/code>, and taking one &lt;code>double&lt;/code> as its argument. However, to finish linking the binary, the linker needs to know what the address of that function will be at runtime, so that it can insert the proper function call. (We&amp;rsquo;ll get into the difference between compiling and linking later. For now, know that &lt;code>clang -Wall -Wextra -Werror -Wpedantic hypot.c -o hypot&lt;/code> runs both steps, compiling and then linking your C file).&lt;/p>
&lt;p>We can fix this error by &lt;em>linking against&lt;/em> the math library. This is a &lt;em>shared library&lt;/em>, meaning that its code can be used by any program on your computer, and the code is loaded dynamically when the program runs instead of being part of the executable. (All modern operating systems have shared libraries, but they use different file extensions. On Linux they are &lt;code>.so&lt;/code> files, macOS uses &lt;code>.dylib&lt;/code>, and Windows uses &lt;code>.dll&lt;/code>.) Each executable contains a list of shared libraries that should be loaded, and linking against a shared library just adds its name to this list.&lt;/p>
&lt;p>Library names are prefixed with &lt;code>lib&lt;/code>. The math library is &lt;code>libm&lt;/code>. To link against a library, you use &lt;code>-l&lt;/code> followed by the name of the library without the prefix, so the math library is &lt;code>-lm&lt;/code>. Let&amp;rsquo;s recompile with this flag:&lt;/p>
&lt;pre>&lt;code>$ clang -Wall -Wextra -Werror -Wpedantic hypot.c -o hypot -lm
&lt;/code>&lt;/pre>&lt;p>This time, the program handles the entire range of square roots:&lt;/p>
&lt;pre>&lt;code>$ ./hypot
side a: 2
side b: 2
c = 2.828427
&lt;/code>&lt;/pre>&lt;p>Besides the fact that compilation succeeded, how do we know that the math library was linked properly? There&amp;rsquo;s a utility called &lt;code>ldd&lt;/code> that lists which libraries a given executable links against. Let&amp;rsquo;s try it on our &lt;code>hypot&lt;/code> binary:&lt;/p>
&lt;pre>&lt;code>$ ldd hypot
linux-vdso.so.1 (0x00007ffdc0912000)
libm.so.6 =&amp;gt; /usr/lib/libm.so.6 (0x00007fa15dbbd000)
libc.so.6 =&amp;gt; /usr/lib/libc.so.6 (0x00007fa15d9f1000)
/lib64/ld-linux-x86-64.so.2 =&amp;gt; /usr/lib64/ld-linux-x86-64.so.2 (0x00007fa15dd43000)
&lt;/code>&lt;/pre>&lt;p>The exact output may differ from system to system, but you should at least see &lt;code>libm&lt;/code> and &lt;code>libc&lt;/code>. &lt;code>libc&lt;/code> is the standard C library, and it is linked by default. That&amp;rsquo;s why we can call functions like &lt;code>printf&lt;/code> and &lt;code>scanf&lt;/code> without any linker flagsâ€”they are part of &lt;code>libc&lt;/code>.&lt;/p>
&lt;p>Another interesting thing about this output is that it shows where each library is stored. On my system, they are all in &lt;code>/usr/lib&lt;/code>. I tried this on an Ubuntu system and they were in &lt;code>/lib/x86_64-linux-gnu&lt;/code> (suggesting that you could also have dynamic libraries installed for different CPU architectures). Fortunately, the system determines the exact path when your executable is running. This means I could copy my &lt;code>hypot&lt;/code> executable onto an Ubuntu system (or copy an executable compiled on Ubuntu onto my system), and it would still find all the libraries it needs.&lt;/p>
&lt;h2 id="splitting-up-our-program">Splitting up our program&lt;/h2>
&lt;p>We have successfully modified our program to use the system&amp;rsquo;s &lt;code>sqrt&lt;/code> function instead of our own janky one! All that remains is to, as promised, move the &lt;code>my_hypot&lt;/code> function into its own file.&lt;/p>
&lt;p>We&amp;rsquo;ll create two new files: a header, &lt;code>mathlib.h&lt;/code>, and a C file, &lt;code>mathlib.c&lt;/code>. Insert the following contents:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#8f5902;font-style:italic">// mathlib.h
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#pragma once
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">double&lt;/span> &lt;span style="color:#000">my_hypot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">double&lt;/span> &lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">double&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#8f5902;font-style:italic">// mathlib.c
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;#34;mathlib.h&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;lt;math.h&amp;gt;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">double&lt;/span> &lt;span style="color:#000">my_hypot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">double&lt;/span> &lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">double&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">sqrt&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The line &lt;code>#pragma once&lt;/code> in &lt;code>mathlib.h&lt;/code> ensures that the header file is only included once. It won&amp;rsquo;t make a difference in this tutorial, but in more advanced programs where one header file includes another header file (e.g. to get type definitions), you may get errors about multiple definitions of the contents of a header without &lt;code>#pragma once&lt;/code>.&lt;/p>
&lt;p>We also need to include the header file (not the C file!) from our main &lt;code>hypot.c&lt;/code>. Add the &lt;code>#include&lt;/code> statement:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#8f5902;font-style:italic">// hypot.c
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;lt;math.h&amp;gt;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// new line
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;#34;mathlib.h&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">double&lt;/span> &lt;span style="color:#000">my_hypot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">double&lt;/span> &lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">double&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">sqrt&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">void&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">double&lt;/span> &lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000">printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;side a: &amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">!&lt;/span>&lt;span style="color:#000">scanf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%lf&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">fprintf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">stderr&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;invalid input&lt;/span>&lt;span style="color:#4e9a06">\n&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;side b: &amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">!&lt;/span>&lt;span style="color:#000">scanf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%lf&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">fprintf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">stderr&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;invalid input&lt;/span>&lt;span style="color:#4e9a06">\n&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;c = %lf&lt;/span>&lt;span style="color:#4e9a06">\n&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">my_hypot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">));&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We &lt;code>#include&lt;/code> headers, not C files, because the C file is going to be compiled separately and linked. The file with the include statement only needs the declarations of functions, not definitions.&lt;/p>
&lt;p>You may already be thinking of some other changes we&amp;rsquo;ll have to make to &lt;code>hypot.c&lt;/code>. Let&amp;rsquo;s add &lt;code>mathlib.c&lt;/code> as an input file to our last compilation command, and try compiling this:&lt;/p>
&lt;pre>&lt;code>$ clang -Wall -Wextra -Werror -Wpedantic hypot.c mathlib.c -o hypot -lm
/usr/bin/ld: /tmp/mathlib-5b7ded.o: in function `my_hypot':
mathlib.c:(.text+0x0): multiple definition of `my_hypot'; /tmp/hypot-96432d.o:hypot.c:(.text+0x0): first defined here
clang-12: error: linker command failed with exit code 1 (use -v to see invocation)
&lt;/code>&lt;/pre>&lt;p>Zeroing in on that error, the main issue is &lt;code>multiple definition of `my_hypot'&lt;/code>. It says that one definition is in &lt;code>mathlib.c&lt;/code> and another is in &lt;code>hypot.c&lt;/code>. Let&amp;rsquo;s remove the one in &lt;code>hypot.c&lt;/code> (we also remove &lt;code>#include &amp;lt;math.h&amp;gt;&lt;/code> since this file no longer needs to call &lt;code>sqrt&lt;/code>):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;#34;mathlib.h&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// my_hypot function removed
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">void&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">double&lt;/span> &lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000">printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;side a: &amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">!&lt;/span>&lt;span style="color:#000">scanf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%lf&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">fprintf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">stderr&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;invalid input&lt;/span>&lt;span style="color:#4e9a06">\n&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;side b: &amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">!&lt;/span>&lt;span style="color:#000">scanf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%lf&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">fprintf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">stderr&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;invalid input&lt;/span>&lt;span style="color:#4e9a06">\n&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;c = %lf&lt;/span>&lt;span style="color:#4e9a06">\n&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">my_hypot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">));&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If we compile this using the same command as before, it works!&lt;/p>
&lt;h2 id="automating-compilation-with-make">Automating compilation with Make&lt;/h2>
&lt;p>We&amp;rsquo;re almost ready to reduce our entire compilation process to just one command, but first we must learn one more concept.&lt;/p>
&lt;h3 id="object-files">Object files&lt;/h3>
&lt;p>An executable file (like the &lt;code>hypot&lt;/code> file that we are creating) contains several things:&lt;/p>
&lt;ul>
&lt;li>machine code for every function in your program&lt;/li>
&lt;li>an entry point (in C, the &lt;code>main&lt;/code> function) where execution should begin&lt;/li>
&lt;li>data that the program will need when it runs (e.g. the &lt;code>&amp;quot;side a: &amp;quot;&lt;/code>) string that we print&lt;/li>
&lt;li>space for global variables&lt;/li>
&lt;li>a list of dynamic libraries that should be loaded&lt;/li>
&lt;/ul>
&lt;p>An &lt;em>object file&lt;/em> is similar to an executable, but different in some important ways. At the fundamental level, object files still contain executable code. An executable file is your whole program, but for programs with multiple source files, an object file is the compiled version of a single C file. Since object files cannot run on their own, they don&amp;rsquo;t have an entry point (they could have a function called &lt;code>main&lt;/code>, however). Also, in an executable file, every function that&amp;rsquo;s referenced must be defined either in the executable itself, or in a dynamic library that is linked. Object files can reference external functions.&lt;/p>
&lt;p>To compile a C program, you &lt;em>compile&lt;/em> each C file into an object file, and then &lt;em>link&lt;/em> those object files into one executable. Even if you don&amp;rsquo;t list these steps explicitly, Clang still performs both steps; it just deletes the object files when it&amp;rsquo;s done. The linking process entails:&lt;/p>
&lt;ul>
&lt;li>combining all the code in the various object files, making sure there are no functions with the same name&lt;/li>
&lt;li>for each function call, figuring out where that function will actually be located (in the binary or in a dynamic library) at runtime&lt;/li>
&lt;li>making sure there is a &lt;code>main&lt;/code> function, and marking it as the entry point&lt;/li>
&lt;li>producing the final binary&lt;/li>
&lt;/ul>
&lt;h3 id="manually-compiling-and-linking">Manually compiling and linking&lt;/h3>
&lt;p>First, let&amp;rsquo;s run the commands to compile our C files to object files and link them. This is what make will eventually do for us.&lt;/p>
&lt;p>The &lt;code>-c&lt;/code> flag tells Clang to output an object file instead of an executable. By default, it will just replace &lt;code>.c&lt;/code> with &lt;code>.o&lt;/code>, but you can also specify the location of the object file manually with &lt;code>-o&lt;/code>. Delete the &lt;code>hypot&lt;/code> binary if you still have it from a previous section, and then let&amp;rsquo;s compile &lt;code>hypot.c&lt;/code> and see what it creates:&lt;/p>
&lt;pre>&lt;code>$ clang -Wall -Wextra -Werror -Wpedantic -c hypot.c
$ ls
hypot.c hypot.o mathlib.c mathlib.h
&lt;/code>&lt;/pre>&lt;p>Even though &lt;code>hypot.c&lt;/code> uses functions from &lt;code>mathlib.c&lt;/code>, it compiles just fine. But let&amp;rsquo;s try linking it. The command to link object files is the same as the command to link C files, except you specify object files as input. We also omit the warning flags, since those only affect the compiler, not the linker.&lt;/p>
&lt;pre>&lt;code>$ clang hypot.o -o hypot
/usr/bin/ld: hypot.o: in function `main':
hypot.c:(.text+0xc1): undefined reference to `my_hypot'
clang-12: error: linker command failed with exit code 1 (use -v to see invocation)
&lt;/code>&lt;/pre>&lt;p>It&amp;rsquo;s complaining that it can&amp;rsquo;t find the &lt;code>my_hypot&lt;/code> function, since that is in a different file. Note that we got this error during linking and not compilation, since object files are allowed to reference functions from other files. Let&amp;rsquo;s compile &lt;code>mathlib.c&lt;/code> into an object file and try again:&lt;/p>
&lt;pre>&lt;code>$ clang -Wall -Wextra -Werror -Wpedantic -c mathlib.c
$ ls
hypot.c hypot.o mathlib.c mathlib.h mathlib.o
$ clang hypot.o mathlib.o -o hypot
/usr/bin/ld: mathlib.o: in function `my_hypot':
mathlib.c:(.text+0x2b): undefined reference to `sqrt'
clang-12: error: linker command failed with exit code 1 (use -v to see invocation)
&lt;/code>&lt;/pre>&lt;p>Now it can find &lt;code>my_hypot&lt;/code>, but it still can&amp;rsquo;t find &lt;code>sqrt&lt;/code> since we aren&amp;rsquo;t linking the math library. We can add the &lt;code>-lm&lt;/code> flag the same way as before:&lt;/p>
&lt;pre>&lt;code>$ clang -lm hypot.o mathlib.o -o hypot
$ ls
hypot hypot.c hypot.o mathlib.c mathlib.h mathlib.o
&lt;/code>&lt;/pre>&lt;p>It worked!&lt;/p>
&lt;p>Currently, after changing our code, we would have to:&lt;/p>
&lt;ul>
&lt;li>recompile any C file(s) that we changed into new object files&lt;/li>
&lt;li>link all our object files (including ones that didn&amp;rsquo;t change) into a new binary&lt;/li>
&lt;/ul>
&lt;p>This will become impractical quickly. &lt;a href="https://xkcd.com/1319/">Let&amp;rsquo;s automate it!&lt;/a>&lt;/p>
&lt;h3 id="make">Make&lt;/h3>
&lt;p>Make is a utility to automate your build process. It reads a Makefile (which is just a text file exactly called &lt;code>Makefile&lt;/code>) for instructions on how to produce various files, and builds the one that you specified.&lt;/p>
&lt;p>The true power of Make lies in its dependency system. You can specify the files that a file depends on (for instance, our binary &lt;code>hypot&lt;/code> depends on the object files &lt;code>hypot.o&lt;/code> and &lt;code>mathlib.o&lt;/code>). When you use Make to build one file, it will automatically build all the file&amp;rsquo;s dependencies. But it will also look at when the various files were modified, and avoid rebuilding dependencies that have not changed since the file that depends on them was rebuilt. In our example, this means that if we run &lt;code>make&lt;/code>, change &lt;code>hypot.c&lt;/code>, and run &lt;code>make&lt;/code> again, it won&amp;rsquo;t bother recompiling &lt;code>mathlib.c&lt;/code>. This saves a lot of time for large programs!&lt;/p>
&lt;p>We&amp;rsquo;re going to build up our Makefile a little bit at a time. Create a file called &lt;code>Makefile&lt;/code> with the following contents:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="color:#000">CC&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> clang
&lt;span style="color:#000">CFLAGS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> -Wall -Wextra -Werror -Wpedantic
&lt;span style="color:#000">LDFLAGS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> -lm
&lt;span style="color:#000">EXEC&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> hypot
&lt;span style="color:#000">OBJS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> hypot.o mathlib.o
&lt;/code>&lt;/pre>&lt;/div>&lt;p>These are variables that we&amp;rsquo;ll use later in the Makefile.&lt;/p>
&lt;ul>
&lt;li>&lt;code>CC&lt;/code> is the name of the C compiler that we use&lt;/li>
&lt;li>&lt;code>CFLAGS&lt;/code> are the flags that are passed to the compiler&lt;/li>
&lt;li>&lt;code>LDFLAGS&lt;/code> are the flags that are passed to the linker&lt;/li>
&lt;li>&lt;code>EXEC&lt;/code> is the name of the executable file we are making&lt;/li>
&lt;li>&lt;code>OBJS&lt;/code> is the list of object files that we want to compile and link&lt;/li>
&lt;/ul>
&lt;p>Let&amp;rsquo;s add the next parts to our Makefile:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="color:#000">CC&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> clang
&lt;span style="color:#000">CFLAGS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> -Wall -Wextra -Werror -Wpedantic
&lt;span style="color:#000">LDFLAGS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> -lm
&lt;span style="color:#000">EXEC&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> hypot
&lt;span style="color:#000">OBJS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> hypot.o mathlib.o
&lt;span style="color:#000">$(EXEC)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>&lt;span style="color:#000">OBJS&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>CC&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>LDFLAGS&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> -o &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>EXEC&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>OBJS&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Make sure the last line is indented with tabs, not spaces. Make requires tabs.&lt;/p>
&lt;p>This looks complicated! The main thing going on is that &lt;code>$(VAR)&lt;/code> gets replaced with the variable &lt;code>VAR&lt;/code>. If we perform those replacements manually, those last two lines look like:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="color:#000">hypot&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">hypot&lt;/span>.&lt;span style="color:#000">o&lt;/span> &lt;span style="color:#000">mathlib&lt;/span>.&lt;span style="color:#000">o&lt;/span>
clang -lm -o hypot hypot.o mathlib.o
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is one &lt;em>target&lt;/em>. A target begins with the line &lt;code>target: dependencies&lt;/code>, so in this case we are saying that &lt;code>hypot&lt;/code> is a target which depends on &lt;code>hypot.o&lt;/code> and &lt;code>mathlib.o&lt;/code>. After this line come the command(s) to build that file, indented with tabs. You can see that, after all the variables have been substituted, the command here is the same as we were already using to link the executable.&lt;/p>
&lt;p>Let&amp;rsquo;s keep going! Next we&amp;rsquo;ll add targets to build our object files:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="color:#000">CC&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> clang
&lt;span style="color:#000">CFLAGS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> -Wall -Wextra -Werror -Wpedantic
&lt;span style="color:#000">LDFLAGS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> -lm
&lt;span style="color:#000">EXEC&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> hypot
&lt;span style="color:#000">OBJS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> hypot.o mathlib.o
&lt;span style="color:#000">$(EXEC)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>&lt;span style="color:#000">OBJS&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>CC&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>LDFLAGS&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> -o &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>EXEC&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>OBJS&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">hypot.o&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">hypot&lt;/span>.&lt;span style="color:#000">c&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>CC&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>CFLAGS&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> -c hypot.c
&lt;span style="color:#000">mathlib.o&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">mathlib&lt;/span>.&lt;span style="color:#000">c&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>CC&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>CFLAGS&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> -c mathlib.c
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We list the C files as dependencies of these targets to ensure that each object file gets rebuilt when its corresponding C file changes. But unlike the previous example, the C files will not get their own targets in the Makefile, since those files are created by us and not Make. Since Make knows it isn&amp;rsquo;t responsible for creating the C files, it will just check that each one exists before it tries to build the object file, and throw an error if one is missing.&lt;/p>
&lt;p>We&amp;rsquo;re going to add some more to the Makefile, but this is already enough to build our program! Let&amp;rsquo;s try it out. To build a Make target, just run &lt;code>make &amp;lt;target name&amp;gt;&lt;/code> in the directory containing the Makefile. If you don&amp;rsquo;t specify a target, it will use the first one that is defined. In our Makefile, that is the &lt;code>$(EXEC)&lt;/code> rule, so we are good to go. Make sure to delete your object files and executable, if you still have them from previous sections.&lt;/p>
&lt;pre>&lt;code>$ ls
hypot hypot.c hypot.o Makefile mathlib.c mathlib.h mathlib.o
$ rm hypot *.o
$ ls
hypot.c Makefile mathlib.c mathlib.h
$ make
clang -Wall -Wextra -Werror -Wpedantic -c hypot.c
clang -Wall -Wextra -Werror -Wpedantic -c mathlib.c
clang -lm -o hypot hypot.o mathlib.o
$ ls
hypot hypot.c hypot.o Makefile mathlib.c mathlib.h mathlib.o
$ ./hypot
side a: 2
side b: 3
c = 3.605551
&lt;/code>&lt;/pre>&lt;p>It worked! Note how Make prints out the commands that it runs. Let&amp;rsquo;s try compiling it again:&lt;/p>
&lt;pre>&lt;code>$ make
make: 'hypot' is up to date.
&lt;/code>&lt;/pre>&lt;p>It didn&amp;rsquo;t recompile because it has already built everything that it needs, and we didn&amp;rsquo;t change our C files.&lt;/p>
&lt;h3 id="a-more-advanced-makefile">A more advanced Makefile&lt;/h3>
&lt;p>This Makefile works fine, but it can do more. We&amp;rsquo;re going to make a few changes.&lt;/p>
&lt;h4 id="separate-all-target">Separate &lt;code>all&lt;/code> target&lt;/h4>
&lt;p>In a more advanced project, you might have multiple executable files that should be compiled. Right now, we couldn&amp;rsquo;t run &lt;code>make&lt;/code> to compile multiple executables, because it only runs the first target by default.&lt;/p>
&lt;p>We can use something called a &lt;em>phony target&lt;/em> to remedy this. A phony target is a target that doesn&amp;rsquo;t correspond to a single file. In this case, we create a target called &lt;code>all&lt;/code> with all our executables (there is still only one, but there could be more) as dependencies, and put it first in the Makefile:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="color:#000">CC&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> clang
&lt;span style="color:#000">CFLAGS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> -Wall -Wextra -Werror -Wpedantic
&lt;span style="color:#000">LDFLAGS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> -lm
&lt;span style="color:#000">EXEC&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> hypot
&lt;span style="color:#000">OBJS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> hypot.o mathlib.o
&lt;span style="color:#000">all&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>&lt;span style="color:#000">EXEC&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">$(EXEC)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>&lt;span style="color:#000">OBJS&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>CC&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>LDFLAGS&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> -o &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>EXEC&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>OBJS&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">hypot.o&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">hypot&lt;/span>.&lt;span style="color:#000">c&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>CC&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>CFLAGS&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> -c hypot.c
&lt;span style="color:#000">mathlib.o&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">mathlib&lt;/span>.&lt;span style="color:#000">c&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>CC&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>CFLAGS&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> -c mathlib.c
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We&amp;rsquo;ve listed &lt;code>hypot&lt;/code> as the sole dependency of the &lt;code>all&lt;/code> target. If there were a file called &lt;code>all&lt;/code> in our project, we would need to name this target something else, because Make would think that it had already been built. Note that there are no commands to build &lt;code>all&lt;/code>, because it will still run the commands to build &lt;code>hypot&lt;/code>. Feel free to try deleting the executable and/or object files and running &lt;code>make&lt;/code> again.&lt;/p>
&lt;h4 id="cleanup">Cleanup&lt;/h4>
&lt;p>It&amp;rsquo;s common to include a target called &lt;code>clean&lt;/code> that deletes all executables and object files. We&amp;rsquo;ll do this using &lt;code>rm&lt;/code> with the &lt;code>-f&lt;/code> flag (&amp;ldquo;force&amp;rdquo;). The flag means that if we ask it to delete a file that doesn&amp;rsquo;t exist, it will silently ignore that argument instead of producing an error, so we can still run our &lt;code>clean&lt;/code> target even if there isn&amp;rsquo;t anything for it to delete.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="color:#000">CC&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> clang
&lt;span style="color:#000">CFLAGS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> -Wall -Wextra -Werror -Wpedantic
&lt;span style="color:#000">LDFLAGS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> -lm
&lt;span style="color:#000">EXEC&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> hypot
&lt;span style="color:#000">OBJS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> hypot.o mathlib.o
&lt;span style="color:#000">all&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>&lt;span style="color:#000">EXEC&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">$(EXEC)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>&lt;span style="color:#000">OBJS&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>CC&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>LDFLAGS&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> -o &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>EXEC&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>OBJS&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">hypot.o&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">hypot&lt;/span>.&lt;span style="color:#000">c&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>CC&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>CFLAGS&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> -c hypot.c
&lt;span style="color:#000">mathlib.o&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">mathlib&lt;/span>.&lt;span style="color:#000">c&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>CC&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>CFLAGS&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> -c mathlib.c
&lt;span style="color:#000">clean&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>
rm -f &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>EXEC&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>OBJS&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>clean&lt;/code> has no dependencies, and the command uses our variables to delete the files that it should. Let&amp;rsquo;s try it, first using &lt;code>make&lt;/code> to make sure our program is compiled.&lt;/p>
&lt;pre>&lt;code>$ make
make: Nothing to be done for 'all'.
$ ls
hypot hypot.c hypot.o Makefile mathlib.c mathlib.h mathlib.o
$ make clean
rm -f hypot hypot.o mathlib.o
$ ls
hypot.c Makefile mathlib.c mathlib.h
&lt;/code>&lt;/pre>&lt;h4 id="automatically-compiling-object-files">Automatically compiling object files&lt;/h4>
&lt;p>Right now, if we added another C file to our program, we&amp;rsquo;d have to add a new target to our Makefile and copy the command to compile it. This can get unwieldy, and we run the risk of introducing a subtle bug by copying the command incorrectly.&lt;/p>
&lt;p>Fortunately, Make allows us to specify much more general rules. Specifically, we can tell it how to compile any object file from the corresponding C file:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="color:#000">CC&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> clang
&lt;span style="color:#000">CFLAGS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> -Wall -Wextra -Werror -Wpedantic
&lt;span style="color:#000">LDFLAGS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> -lm
&lt;span style="color:#000">EXEC&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> hypot
&lt;span style="color:#000">OBJS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> hypot.o mathlib.o
&lt;span style="color:#000">all&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>&lt;span style="color:#000">EXEC&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">$(EXEC)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>&lt;span style="color:#000">OBJS&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>CC&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>LDFLAGS&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> -o &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>EXEC&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>OBJS&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">%.o&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> %.&lt;span style="color:#000">c&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>CC&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>CFLAGS&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> -c $&amp;lt;
&lt;span style="color:#000">clean&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>
rm -f &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>EXEC&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>OBJS&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The syntax here is tricky. The &lt;code>%&lt;/code> symbols create a correspondence between the names of the object file and C file: any filename ending with &lt;code>.o&lt;/code> depends on the same filename but with &lt;code>.c&lt;/code> instead of &lt;code>.o&lt;/code>. In the compilation command, &lt;code>$&amp;lt;&lt;/code> gets replaced with the name of the dependency, i.e. the name of the C file.&lt;/p>
&lt;p>Let&amp;rsquo;s check that this works, using &lt;code>make clean&lt;/code> first to make sure it has to recompile everything:&lt;/p>
&lt;pre>&lt;code>$ make clean
rm -f hypot hypot.o mathlib.o
$ ls
hypot.c Makefile mathlib.c mathlib.h
$ make
clang -Wall -Wextra -Werror -Wpedantic -c hypot.c
clang -Wall -Wextra -Werror -Wpedantic -c mathlib.c
clang -lm -o hypot hypot.o mathlib.o
$ ls
hypot hypot.c hypot.o Makefile mathlib.c mathlib.h mathlib.o
&lt;/code>&lt;/pre>&lt;p>And it does!&lt;/p>
&lt;h4 id="formatting-with-clang-format">Formatting with clang-format&lt;/h4>
&lt;p>If you use &lt;a href="https://clang.llvm.org/docs/ClangFormat.html">clang-format&lt;/a> and have a configuration file (&lt;code>.clang-format&lt;/code>) next to your code, you can add a target to run it with &lt;code>make format&lt;/code> (here, the rest of the Makefile is omitted, since the target is not specific to our code):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="color:#000">format&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>
clang-format -i -style&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>file *.&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>ch&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="static-analysis-with-scan-build">Static analysis with scan-build&lt;/h4>
&lt;p>&lt;a href="https://clang-analyzer.llvm.org/scan-build.html">scan-build&lt;/a> is a program that detects additional problems with your code at compile time (that a compiler normally would not). We can also call it with a Makefile target:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="color:#000">scan-build&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">clean&lt;/span>
scan-build --use-cc&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>CC&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> make
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This target isn&amp;rsquo;t as straightforward as the clang-format one. Some details to note are:&lt;/p>
&lt;ul>
&lt;li>scan-build&amp;rsquo;s argument is the command that builds our program. Here, that is just &lt;code>make&lt;/code>.&lt;/li>
&lt;li>We list &lt;code>clean&lt;/code> as a dependency. This ensures that all object files and executables are deleted before we run scan-build, so when scan-build runs &lt;code>make&lt;/code>, the whole program is rebuilt.&lt;/li>
&lt;li>scan-build sometimes overrides the compiler used by Make. We specify &lt;code>--use-cc=$(CC)&lt;/code> (effectively &lt;code>--use-cc=clang&lt;/code>) to make sure that it will run using the same compiler that we normally use (as opposed to, say, GCC).&lt;/li>
&lt;/ul>
&lt;p>Here&amp;rsquo;s an example of running it:&lt;/p>
&lt;pre>&lt;code>$ make scan-build
rm -f hypot hypot.o mathlib.o
scan-build --use-cc=clang make
scan-build: Using '/usr/bin/clang-12' for static analysis
make[1]: warning: jobserver unavailable: using -j1. Add '+' to parent make rule.
make[1]: Entering directory '/home/ben/code/c/ucsc-guide-hypot'
/usr/bin/../lib/clang/ccc-analyzer -Wall -Wextra -Werror -Wpedantic -c hypot.c
/usr/bin/../lib/clang/ccc-analyzer -Wall -Wextra -Werror -Wpedantic -c mathlib.c
/usr/bin/../lib/clang/ccc-analyzer -lm -o hypot hypot.o mathlib.o
make[1]: Leaving directory '/home/ben/code/c/ucsc-guide-hypot'
scan-build: Analysis run complete.
scan-build: Removing directory '/tmp/scan-build-2021-10-11-005941-146456-1' because it contains no reports.
scan-build: No bugs found.
&lt;/code>&lt;/pre>&lt;h2 id="expanding-our-program">Expanding our program&lt;/h2>
&lt;p>You&amp;rsquo;ve now seen everything you need to know to use Makefiles. In this last section, I will demonstrate how the build process would change if you wanted to add more C files to your project. We&amp;rsquo;re going to add one more C file and also have our Makefile compile a second binary in addition to &lt;code>hypot&lt;/code>.&lt;/p>
&lt;p>In the spirit of CSE 13S assignment 2, we&amp;rsquo;ll build a test harness that compares the results of our &lt;code>my_hypot&lt;/code> function with the standard library&amp;rsquo;s &lt;code>hypot&lt;/code>. The results should be identical, since we&amp;rsquo;re also using the standard library&amp;rsquo;s &lt;code>sqrt&lt;/code> function and the calculation for what to take the square root of is trivial, but doing this will let us expand on our program.&lt;/p>
&lt;p>Here&amp;rsquo;s the code for the test harness. Save it in &lt;code>hypot-test.c&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#8f5902;font-style:italic">// hypot-test.c
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;lt;math.h&amp;gt;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;#34;mathlib.h&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">void&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">double&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1.0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4.0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1.0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">double&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1.0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4.0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1.0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">double&lt;/span> &lt;span style="color:#000">hypot_result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">hypot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">my_hypot_result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">my_hypot&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;span style="color:#000">difference&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">fabs&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">hypot_result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span> &lt;span style="color:#000">my_hypot_result&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;a = %.0f, b = %.0f: hypot = %16.15lf, my_hypot = %16.15lf, diff &amp;#34;&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;= %16.15lf&lt;/span>&lt;span style="color:#4e9a06">\n&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">hypot_result&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">my_hypot_result&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">difference&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can compile it manually, making sure to link against the math library and our own &lt;code>mathlib.o&lt;/code> (run &lt;code>make&lt;/code> again if you don&amp;rsquo;t have the object file):&lt;/p>
&lt;pre>&lt;code>$ clang -Wall -Werror -Wextra -Wpedantic -c hypot-test.c
$ clang -lm -o hypot-test hypot-test.o mathlib.o
$ ./hypot-test
a = 1, b = 1: hypot = 1.414213562373095, my_hypot = 1.414213562373095, diff = 0.000000000000000
a = 1, b = 2: hypot = 2.236067977499790, my_hypot = 2.236067977499790, diff = 0.000000000000000
a = 1, b = 3: hypot = 3.162277660168380, my_hypot = 3.162277660168380, diff = 0.000000000000000
a = 1, b = 4: hypot = 4.123105625617661, my_hypot = 4.123105625617661, diff = 0.000000000000000
a = 2, b = 1: hypot = 2.236067977499790, my_hypot = 2.236067977499790, diff = 0.000000000000000
a = 2, b = 2: hypot = 2.828427124746190, my_hypot = 2.828427124746190, diff = 0.000000000000000
a = 2, b = 3: hypot = 3.605551275463989, my_hypot = 3.605551275463989, diff = 0.000000000000000
a = 2, b = 4: hypot = 4.472135954999580, my_hypot = 4.472135954999580, diff = 0.000000000000000
a = 3, b = 1: hypot = 3.162277660168380, my_hypot = 3.162277660168380, diff = 0.000000000000000
a = 3, b = 2: hypot = 3.605551275463989, my_hypot = 3.605551275463989, diff = 0.000000000000000
a = 3, b = 3: hypot = 4.242640687119285, my_hypot = 4.242640687119285, diff = 0.000000000000000
a = 3, b = 4: hypot = 5.000000000000000, my_hypot = 5.000000000000000, diff = 0.000000000000000
a = 4, b = 1: hypot = 4.123105625617661, my_hypot = 4.123105625617661, diff = 0.000000000000000
a = 4, b = 2: hypot = 4.472135954999580, my_hypot = 4.472135954999580, diff = 0.000000000000000
a = 4, b = 3: hypot = 5.000000000000000, my_hypot = 5.000000000000000, diff = 0.000000000000000
a = 4, b = 4: hypot = 5.656854249492381, my_hypot = 5.656854249492381, diff = 0.000000000000000
&lt;/code>&lt;/pre>&lt;p>Next, let&amp;rsquo;s modify our Makefile to automatically build &lt;code>hypot-test&lt;/code>. First, we&amp;rsquo;ll rename the existing &lt;code>OBJS&lt;/code> to &lt;code>HYPOT_OBJS&lt;/code>, since we&amp;rsquo;ll eventually create a new list of object files that are needed for &lt;code>hypot-test&lt;/code>. We&amp;rsquo;ll also remove the &lt;code>EXEC&lt;/code> variable and instead write &lt;code>hypot&lt;/code> directly:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="color:#000">CC&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> clang
&lt;span style="color:#000">CFLAGS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> -Wall -Wextra -Werror -Wpedantic
&lt;span style="color:#000">LDFLAGS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> -lm
&lt;span style="color:#000">HYPOT_OBJS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> hypot.o mathlib.o
&lt;span style="color:#000">all&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">hypot&lt;/span>
&lt;span style="color:#000">hypot&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>&lt;span style="color:#000">HYPOT_OBJS&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>CC&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>LDFLAGS&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> -o hypot &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>HYPOT_OBJS&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">%.o&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> %.&lt;span style="color:#000">c&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>CC&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>CFLAGS&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> -c $&amp;lt;
&lt;span style="color:#000">clean&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>
rm -f hypot &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>HYPOT_OBJS&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">format&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>
clang-format -i -style&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>file *.&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>ch&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;span style="color:#000">scan-build&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">clean&lt;/span>
scan-build --use-cc&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>CC&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> make
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now we can add &lt;code>HYPOT_TEST_OBJS&lt;/code> with the object files that this program needs, as well as a &lt;code>hypot-test&lt;/code> target. We&amp;rsquo;ll also add &lt;code>hypot-test&lt;/code> as a dependency of the &lt;code>all&lt;/code> target, so that running &lt;code>make&lt;/code> with no arguments builds both &lt;code>hypot&lt;/code> and &lt;code>hypot-test&lt;/code>. And finally, we&amp;rsquo;ll add the executable and object files to our &lt;code>clean&lt;/code> target:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="color:#000">CC&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> clang
&lt;span style="color:#000">CFLAGS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> -Wall -Wextra -Werror -Wpedantic
&lt;span style="color:#000">LDFLAGS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> -lm
&lt;span style="color:#000">HYPOT_OBJS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> hypot.o mathlib.o
&lt;span style="color:#000">HYPOT_TEST_OBJS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> hypot-test.o mathlib.o
&lt;span style="color:#000">all&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">hypot&lt;/span> &lt;span style="color:#000">hypot&lt;/span>-&lt;span style="color:#000">test&lt;/span>
&lt;span style="color:#000">hypot&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>&lt;span style="color:#000">HYPOT_OBJS&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>CC&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>LDFLAGS&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> -o hypot &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>HYPOT_OBJS&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">hypot-test&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>&lt;span style="color:#000">HYPOT_TEST_OBJS&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>CC&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>LDFLAGS&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> -o hypot-test &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>HYPOT_TEST_OBJS&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">%.o&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> %.&lt;span style="color:#000">c&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>CC&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>CFLAGS&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> -c $&amp;lt;
&lt;span style="color:#000">clean&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>
rm -f hypot hypot-test &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>HYPOT_OBJS&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>HYPOT_TEST_OBJS&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">format&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>
clang-format -i -style&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>file *.&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>ch&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;span style="color:#000">scan-build&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">clean&lt;/span>
scan-build --use-cc&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>CC&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> make
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s test this out by running &lt;code>make clean&lt;/code> and then having it recompile everything with &lt;code>make&lt;/code>:&lt;/p>
&lt;pre>&lt;code>$ ls
hypot hypot.o hypot-test.c Makefile mathlib.h
hypot.c hypot-test hypot-test.o mathlib.c mathlib.o
$ make clean
rm -f hypot hypot-test hypot.o mathlib.o hypot-test.o mathlib.o
$ ls
hypot.c hypot-test.c Makefile mathlib.c mathlib.h
$ make
clang -Wall -Wextra -Werror -Wpedantic -c hypot.c
clang -Wall -Wextra -Werror -Wpedantic -c mathlib.c
clang -Wall -Wextra -Werror -Wpedantic -c hypot-test.c
clang -lm -o hypot hypot.o mathlib.o
clang -lm -o hypot-test hypot-test.o mathlib.o
$ ls
hypot hypot.o hypot-test.c Makefile mathlib.h
hypot.c hypot-test hypot-test.o mathlib.c mathlib.o
$ ./hypot
side a: 3
side b: 4
c = 5.000000
$ ./hypot-test
a = 1, b = 1: hypot = 1.414213562373095, my_hypot = 1.414213562373095, diff = 0.000000000000000
a = 1, b = 2: hypot = 2.236067977499790, my_hypot = 2.236067977499790, diff = 0.000000000000000
a = 1, b = 3: hypot = 3.162277660168380, my_hypot = 3.162277660168380, diff = 0.000000000000000
a = 1, b = 4: hypot = 4.123105625617661, my_hypot = 4.123105625617661, diff = 0.000000000000000
a = 2, b = 1: hypot = 2.236067977499790, my_hypot = 2.236067977499790, diff = 0.000000000000000
a = 2, b = 2: hypot = 2.828427124746190, my_hypot = 2.828427124746190, diff = 0.000000000000000
a = 2, b = 3: hypot = 3.605551275463989, my_hypot = 3.605551275463989, diff = 0.000000000000000
a = 2, b = 4: hypot = 4.472135954999580, my_hypot = 4.472135954999580, diff = 0.000000000000000
a = 3, b = 1: hypot = 3.162277660168380, my_hypot = 3.162277660168380, diff = 0.000000000000000
a = 3, b = 2: hypot = 3.605551275463989, my_hypot = 3.605551275463989, diff = 0.000000000000000
a = 3, b = 3: hypot = 4.242640687119285, my_hypot = 4.242640687119285, diff = 0.000000000000000
a = 3, b = 4: hypot = 5.000000000000000, my_hypot = 5.000000000000000, diff = 0.000000000000000
a = 4, b = 1: hypot = 4.123105625617661, my_hypot = 4.123105625617661, diff = 0.000000000000000
a = 4, b = 2: hypot = 4.472135954999580, my_hypot = 4.472135954999580, diff = 0.000000000000000
a = 4, b = 3: hypot = 5.000000000000000, my_hypot = 5.000000000000000, diff = 0.000000000000000
a = 4, b = 4: hypot = 5.656854249492381, my_hypot = 5.656854249492381, diff = 0.000000000000000
&lt;/code>&lt;/pre>&lt;p>It all worked! Make handles building multiple binaries very wellâ€”notice how it only built &lt;code>mathlib.c&lt;/code> once, even though it is needed by both binaries. Also, this Makefile compiles both binaries by default (thanks to the &lt;code>all&lt;/code> target), but you can also compile only one binary with &lt;code>make hypot&lt;/code> or &lt;code>make hypot-test&lt;/code>.&lt;/p></description></item><item><title>Docs: What Is Version Control?</title><link>https://hilalmorrar.com/ucsc-guide/docs/majorguides/computerscience/git/fundamentals/what_is_version_control/</link><pubDate>Wed, 15 Sep 2021 00:00:00 +0000</pubDate><guid>https://hilalmorrar.com/ucsc-guide/docs/majorguides/computerscience/git/fundamentals/what_is_version_control/</guid><description>
&lt;p>Before delving into the specifics of Git, we must first explain what version control is because Git is a version control system. This article will explain what version control is and what&amp;rsquo;re its benefits.&lt;/p>
&lt;h2 id="definition">Definition&lt;/h2>
&lt;p>Anything from text documents to software go through cycles of development and revisions to get to the current place that they&amp;rsquo;re at. Much of the time, multiple people are modifying different things at once or even making conflicting changes, resulting in a non-linear series of changes.&lt;/p>
&lt;p>How all these issues are dealt with depends on the version control system being used. In essence, anything that allows people to manage changes done to something is a version control system. There are many applications of version control in our daily lives outside of programming. One example of this is being able to check version history and revert changes in Google Docs.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 294px">
&lt;img class="card-img-top" src="../version_control_example.jpg" width="294" height="497">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
How Google Docs implements version control
&lt;small class="text-muted">&lt;br>Photo: docs.google.com&lt;/small>
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>We will dive into how Git implements version control in the next article, but for now, we&amp;rsquo;ll talk about its benefits when it comes to developing software.&lt;/p>
&lt;p>â€‹&lt;/p>
&lt;hr>
&lt;h2 id="benefits-for-developing-software">Benefits for developing software&lt;/h2>
&lt;p>Significant pieces of software are virtually never developed completely alone and undergo countless changes. This results in a potentially complicated net of changes which must be kept track of to do things like revert a specific set of changes or keep track of who did what. It is because of this that version control is vital for software development.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 500px">
&lt;img class="card-img-top" src="../branch-graph-example.png" width="835" height="622">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
A graph of changes to a project over time.
&lt;small class="text-muted">&lt;br>Graph: Made using the Git Graph Visual Studio Code extension&lt;/small>
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>Whatever field of computer science you end up doing, you will always encounter the usage of version control in some way or another, which is why lower division computer science courses such as CSE 12/L and CSE 13 make you get into the habit of using Git. Although the projects you do in those courses will be alone and not with other contributors, it is still extremely useful for reverting bad changes, seeing what was done when, and for other reasons that will be explained in the next article.&lt;/p>
&lt;p>â€‹&lt;/p>
&lt;hr>
&lt;p>â€‹&lt;/p>
&lt;p>Now that we&amp;rsquo;ve covered what version control is, the next article will explain what Git does to implement a version control system to reap the benefits of using it as explained above.&lt;/p></description></item><item><title>Docs: Proofs</title><link>https://hilalmorrar.com/ucsc-guide/docs/majorguides/computerscience/discretemath/proofs/</link><pubDate>Fri, 10 Sep 2021 00:00:00 +0000</pubDate><guid>https://hilalmorrar.com/ucsc-guide/docs/majorguides/computerscience/discretemath/proofs/</guid><description>
&lt;p>The proof building skills you gain from this class will be foundational for your success in CSE 102. They may look intimidating but the most comforting advice I have received from my teachers and tutors is that notation is half the problem. Once you work your way through the notations in the problem, you can start to understand what you are looking at and think of approaches to solutions. The following are just previews into common proof techniques from CSE 16 and 102.&lt;/p>
&lt;blockquote>
&lt;p>Note: Sometimes professors say which proof technique to use and sometimes it&amp;rsquo;s not explicitly stated, so you will need to pick a valid proof technique that can get you the desired result. So these are just good skills to keep in mind when creating a proof. Don&amp;rsquo;t worry - proof get a little easier and make more sense with practice!&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="contradiction">&lt;strong>Contradiction&lt;/strong>&lt;/h2>
&lt;p>The starting point for a proof by contradiction can be a little tricky, but it is fun when you get the hang of it. A common set up is simply &amp;ldquo;prove this&amp;rdquo; and it gives you some expression to prove. The way a proof by contradiction works is that you take the negation of what was given and assme those are True as your &amp;ldquo;givens&amp;rdquo; to start with, then you continue using those negated expressions to see if you derive a contradiction (or something that cannot possibly be True). I will give and explain one example below.&lt;/p>
&lt;h3 id="example">Example&lt;/h3>
&lt;p>Prove the $\sqrt{2}$ is &lt;em>irrational&lt;/em>.&lt;/p>
&lt;p>The first thing to do in a proof by contraction is to negate what is given and then assume that as a hypothesis.&lt;/p>
&lt;p>We assume $\sqrt{2}$ is &lt;em>rational&lt;/em> and use various mathematical definitions to try to find a contradiction. The idea here is that we have to explore the world to see what would happen if $\sqrt{2}$ is indeed &lt;em>rational&lt;/em> and look for something that doesn&amp;rsquo;t make sense. In this problem, we will see that the greatest common divisor between two number is found to be 1 and not 1 at the same time. This is the contradiction because this cannot be true. So we can conclude the $\sqrt{2}$ is &lt;em>irrational&lt;/em> because if was &lt;em>rational&lt;/em> then we have shown that a contradiction arises.&lt;/p>
&lt;blockquote>
&lt;p>Note: $gcd(a, b)$ is the greatest common divisor between $a$ and $b$. In this problem, we will be concerned about $gcd(a, b) = 1$, which means that $\frac{a}{b}$ is in its simplest form and $gcd(a, b) \neq 1$, which means $\frac{a}{b}$ is not in its simplest form.&lt;/p>
&lt;/blockquote>
&lt;p>The proof goes like this:&lt;/p>
&lt;ul>
&lt;li>Assume $\sqrt{2}$ is rational.&lt;/li>
&lt;li>This means $\sqrt{2}$ made up of some $\frac{a}{b}$ where $a, b \in \mathbb{Z}$ and $b \neq 0$ and $gcd(a, b) = 1$.&lt;/li>
&lt;li>Now, $\sqrt{2} = \frac{a}{b}$.&lt;/li>
&lt;li>Some rearranging gives, $2 = \frac{a^2}{b^2}$.&lt;/li>
&lt;li>Solve for $a^2$ gives $a^2 = 2b^2$.&lt;/li>
&lt;li>Using a theorem that says if $a^2$ then, $a$ is even too (it&amp;rsquo;s a fun, quick proof to prove this theorem, try it), we can see that 2 divides $a$ evenly because the theorem says $a$ is even, so it&amp;rsquo;s a multiple of 2.&lt;/li>
&lt;li>Then from $2 = \frac{a^2}{b^2}$, we can solve for $b^2$ to get $b^2 = 2a^2$.&lt;/li>
&lt;li>Same as above, we can see that $b^2$ is even and it follows that $b$ is even.&lt;/li>
&lt;li>Now, we have something that doesn&amp;rsquo;t make sense. We found that $a$ and $b$ are both even, which means that 2 can divide them both, which means $gcd(a, b) \neq 1$. However, earlier in proof, we stated that the $gcd(a, b)$ is 1. These both cannot be true at the same time, so we can conclude that the $\sqrt{2}$ is irrational because otherwise there would be an inconsistency.&lt;/li>
&lt;/ul>
&lt;h2 id="formal-proof-rules">&lt;strong>Formal Proof Rules&lt;/strong>&lt;/h2>
&lt;p>Before we get to the next techniques, you need to be familiar with what is and how to make a formal proof. In general, these are made with two columns, left side has the mathematical expressions and the work shown and the right side as the name of the rule or explanation of the reasoning that you used to get to that result. A couple rules and then the example to tie it all together:&lt;/p>
&lt;ol>
&lt;li>Two columns: left has the actual expressions, right has the name of the the rule you applied and the line numbers for the expressions involved.&lt;/li>
&lt;li>Number each line starting from 1.&lt;/li>
&lt;/ol>
&lt;p>I know it is annoying to always &amp;ldquo;show your work&amp;rdquo;, but it is easy to get lost or make a small mistake in the proof and then the answer is off or you cannot get to the correct answer. There are many ways to make a proof for a given problem, so these rules are in place to make it clear to the reader &lt;em>how&lt;/em> you solved it and to yourself to follow your process to easily backtrack if something went wrong. Believe me, it is a time saver.&lt;/p>
&lt;hr>
&lt;h2 id="contrapositive">Contrapositive&lt;/h2>
&lt;p>The contrapositive is also an interesting proof technique. This technique uses the fact that $p \rightarrow q$ is logically equivalent to (i.e. the same as) $\neg q \rightarrow \neg p$. You can check this equivalence for yourself by applying the Definition of Implication to both statements and seeing that they are the same.&lt;/p>
&lt;p>This may seem a bit unusual but it is incredibly useful to be able to rewrite a given problem in different ways and still maintain the same logical value. You can think of this as the same thing as simplifying or factoring an expression in Calculus - you get the same answer, but the manipulation to the expression makes it easier to work with.&lt;/p>
&lt;h3 id="definition-of-even-and-odd">Definition of Even and Odd&lt;/h3>
&lt;p>For the example below and for other proofs you may come across it is good to explicitly know the formal definitions of even and odd numbers.&lt;/p>
&lt;ul>
&lt;li>Odd: The number can be rewritten in the form of $x = 2m + 1$, where $m \in \mathbb{Z}$. You can try this with any integer for $m$ and see that $x$ will always be odd.&lt;/li>
&lt;li>Even: The number can be rewritten in the form of $x = 2m$, where $m \in \mathbb{Z}$. You can try this with any integer for $m$ and see that $x$ will always be even.&lt;/li>
&lt;/ul>
&lt;h3 id="example-1">Example&lt;/h3>
&lt;p>Prove that if $n^2$ is even, then $n$ is even.&lt;/p>
&lt;p>If you try to prove this directly, it will be quite difficult. So, we will take the contrapositive and prove it indirectly using the 2 column formal proof layout with the math on the left and the reasoning on the right.&lt;/p>
&lt;p>Contrapositive: Prove that if $n$ is odd, then $n^2$ is odd.&lt;/p>
&lt;table>
&lt;tr>
&lt;th>Expressions&lt;/th>
&lt;th>Reasoning&lt;/th>
&lt;/tr>
&lt;tr>
&lt;td>1. $n$ is odd &lt;/td>
&lt;td>Hypothesis 1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2. $n = 2p + 1$, where $p \in \mathbb{Z}$ ($p$ is an integer) &lt;/td>
&lt;td>Definition of odd&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3. $n^2 = (2p + 1)^2$ &lt;/td>
&lt;td>Logically/Mathematically equivalent to line 2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4. $n^2 = 2(2p^2 + 2p) + 1$ &lt;/td>
&lt;td>Logically/Mathematically equivalent to line 3 (multiplied the square and factored out 2)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5. $n^2 = 2k + 1$, where $k = 2p^2 + 2p$ and $k \in \mathbb{Z}$ &lt;/td>
&lt;td>Logically/Mathematically equivalent to line 4 (defined a new variable $k$ as an integer)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6. $n^2$ is odd &lt;/td>
&lt;td>Logically/Mathematically equivalent to line 5 by the definition of odd&lt;/td>
&lt;/tr>
&lt;/table>
&lt;p>Notice how most of this proof was just applying the formal definition of odd numbers (which you already knew but not formally) and manipulating the expression until something useful came about. There is not too much to explain other than reading the proof and following along because most of it is things you already knew but just slightly more formal!&lt;/p>
&lt;hr>
&lt;h2 id="rules-of-inference">&lt;strong>Rules of Inference&lt;/strong>&lt;/h2>
&lt;p>This handout will be your best friend when doing some more formal boolean algebra proofs (see the Proofs section here). Like the previous handout, I will explain one rule from this one so you know how to read and use it when you have a formal proof to solve.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 548px">
&lt;img class="card-img-top" src="https://hilalmorrar.com/ucsc-guide/ucsc-guide/docs/majorguides/computerscience/discretemath/proofs/rules_of_inference_hu9cef0f421f663295dd71422a8869daaf_35575_538x591_fill_catmullrom_smart1_2.png" width="538" height="591">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
A reference chart for the rules of inference.
&lt;small class="text-muted">&lt;br/>Diagram: skedsoft.com&lt;/small>&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>(Click &lt;a href="rules_of_inference.png">here&lt;/a> to download the image if you want to save it for safe keeping.)&lt;/p>
&lt;h3 id="notation-in-the-rules-of-inference">Notation in the Rules of Inference&lt;/h3>
&lt;p>The $\lnot$ symbol is another way is representing a negation/inversion. The $\therefore$ symbol is called &amp;ldquo;therefore&amp;rdquo; and means therefore, you can think of it as an equal sign for now. It will make more sense in the example below. That is all the &lt;em>new&lt;/em> notation in the handout! The rest should be explained in previous parts of the guide!&lt;/p>
&lt;h3 id="rules-of-inference-example">Rules of Inference Example&lt;/h3>
&lt;p>I think the easiest way to understand how to use and read this chart is by making a small proof and walking you through my thought process! I will put the proof up first then explain it under.&lt;/p>
&lt;p>Given: $(p \land q) \rightarrow r$, $p \rightarrow p$, $q$. Prove $r$.&lt;/p>
&lt;table>
&lt;tr>
&lt;th>Expressions&lt;/th>
&lt;th>Reasoning&lt;/th>
&lt;/tr>
&lt;tr>
&lt;td>1. $(p \land q) \rightarrow r$ &lt;/td>
&lt;td>Hypothesis 1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2. $q \rightarrow p$ &lt;/td>
&lt;td>Hypothesis 2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3. $q$ &lt;/td>
&lt;td>Hypothesis 3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4. $p$ &lt;/td>
&lt;td>Modus Ponens, lines 2 and 3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5. $p \land q$ &lt;/td>
&lt;td>Conjunction, lines 3 and 4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6. $r$ &lt;/td>
&lt;td>Modus Ponens, lines 1 and 5&lt;/td>
&lt;/tr>
&lt;/table>
&lt;p>You are given three &amp;ldquo;hypotheses&amp;rdquo;, which are the expressions that are given to you to use to solve for $r$. You are trying to derive $r$ from these three hypotheses. I like to list out the given hypotheses first, so they are there when I want to use them later, but you can write them down you need them as you go through the proof too.&lt;/p>
&lt;p>Now to get to line 4, I look at the rules chart and I see what kind of rules I can apply to any previous lines and see if that gets me anything that can be useful. In this case, I see that Modus Ponens says if you have a line that says $p$ and a line that says $p \rightarrow q$, you can get $q$ as a result. I know the letters are a bit off but that is okay as long as you keep it consistent, you can make a substitution, so you can temporarily think of the $p$ in the proof as the $q$ in the chart and vice versa.&lt;/p>
&lt;p>The logic behind Modus Ponens applied to line 4 is that if you have the value of $q$ in line 3 and you have the expression that says $q$ implies the value of $p$, then you can use $q$ you have to get the value of $p$. I think of this one as &amp;ldquo;unlocking&amp;rdquo;. I need to get a $q$ because I have something that tells me that $q$ &amp;ldquo;unlocks&amp;rdquo; a new value that I need, which is $p$.&lt;/p>
&lt;p>Put into a more concrete example, let&amp;rsquo;s say $q =$ it is raining and $p =$ get an umbrella. Then you have a line that says $q \rightarrow p$ (i.e &amp;ldquo;if it is raining, then get an umbrella). You can observe that is raining, so we have established $q$ to be True (which is what line 3 represents in the proof). We have a statement (the implication arrow) that says what to do if it is raining, so we can conclude $p$ from that, which is to get an umbrella.&lt;/p>
&lt;p>In line 5 of the proof, this is using the Conjunction rule, which allows you to combine any expressions in the proof so far with an AND ($\land$) between them. In this case, I see that it would helpful to do that because Hypothesis 1 on line says that if you have $p \land q$, you can get $r$, which is what we need.&lt;/p>
&lt;p>Finally, I apply Modus Ponens again to lines 1 and 5 to get $r$ from $p \land q$ and $(p \land q) \rightarrow r$.&lt;/p>
&lt;hr>
&lt;h2 id="induction">&lt;strong>Induction&lt;/strong>&lt;/h2>
&lt;p>Induction is usually the proof technique that is hardest to grasp in my experience working with students, but it gets easier with more practice problems.&lt;/p>
&lt;p>The easiest introduction to the concept here is to think of a staircase. In order to begin walking on the staircase to get to each next step, you must first get on the very first step, but when you get on the first step, you know know how to get to the next step. So you use that information to get you to each next step until you get to the end.&lt;/p>
&lt;p>In inductive proofs, it is a similar flow: the first &amp;ldquo;step in the stair case&amp;rdquo; is a mathematical expression that must be established as true. Then you use that proven statement to help you prove each next step.&lt;/p>
&lt;p>There are two types of induction: weak and strong.&lt;/p>
&lt;h3 id="weak-induction">Weak Induction&lt;/h3>
&lt;p>Putting the staircase analogy formally, $p(n) \rightarrow p(n+1)$, where $n \in \mathbb{N}$.&lt;/p></description></item><item><title>Docs: Basic Git Operations</title><link>https://hilalmorrar.com/ucsc-guide/docs/majorguides/computerscience/git/basics/basic_git_operations/</link><pubDate>Thu, 09 Sep 2021 00:00:00 +0000</pubDate><guid>https://hilalmorrar.com/ucsc-guide/docs/majorguides/computerscience/git/basics/basic_git_operations/</guid><description/></item><item><title>Docs: Logic</title><link>https://hilalmorrar.com/ucsc-guide/docs/majorguides/computerscience/discretemath/logic/</link><pubDate>Wed, 08 Sep 2021 00:00:00 +0000</pubDate><guid>https://hilalmorrar.com/ucsc-guide/docs/majorguides/computerscience/discretemath/logic/</guid><description>
&lt;p>The knowledge you gain about logic from Discrete Math (CSE 16) and Computer Systems and Assembly Language (CSE 12) will be some of the most commonly used skills in your career because of how frequently we use conditional statements and try to simplify them in code.&lt;/p>
&lt;h2 id="definitions">Definitions&lt;/h2>
&lt;ul>
&lt;li>Bit: a bit is a binary value that is a 0 or a 1. Just one, not both, and nothing in between.&lt;/li>
&lt;li>Binary: a number system used in computer science that has only the numbers 0 and 1.&lt;/li>
&lt;li>Boolean: only has the value of True or False. Just one, not both, and nothing in between.&lt;/li>
&lt;li>Proposition: a logical expression that can be evalutated to a True or False value.&lt;/li>
&lt;/ul>
&lt;h2 id="logic-gates">&lt;strong>Logic Gates&lt;/strong>&lt;/h2>
&lt;p>This is one of the most common concepts you will come across when doing any programming. So, you will eventually memorize these, if you have not seen them before just from how often you will need to use them. All of the following gates are boolean/binary operations, which means that the inputs and outputs can only be True (1) or False (0) and nothing else and nothing in between.&lt;/p>
&lt;hr>
&lt;h3 id="and">AND&lt;/h3>
&lt;p>The AND gate can take in any number of input greater than 1. The truth table for the AND gate and its appearance in digital logic design is shown below.&lt;/p>
&lt;p>In short, the AND gate returns/outputs a True (1), &lt;em>only&lt;/em> when &lt;em>all&lt;/em> of its inputs are True (1). It returns/outputs a False (0) otherwise (i.e. when at least one input is False (0) ).&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Example: You want to check if A &lt;strong>AND&lt;/strong> B &lt;strong>AND&lt;/strong> C &lt;strong>AND&lt;/strong> D are all True (1).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Example: You are making a new social media and working on how to have a user create a new account. You need to check if the user entered a valid email &lt;strong>AND&lt;/strong> they are over a certain age &lt;strong>AND&lt;/strong> entered a secure password.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="or">OR&lt;/h3>
&lt;p>The OR gate can take in any number of input greater than 1. The truth table for the OR gate and its appearance in digital logic design is shown below.&lt;/p>
&lt;p>In short, the OR gate returns/outputs a True (1), when &lt;em>at least&lt;/em> one of its inputs are True (1). The other inputs can be anything else - there just has to be at least one True (1) in the inputs. It returns/outputs False (0) when all of the inputs are False (0).&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Example: You want to check if any one of A &lt;strong>OR&lt;/strong> B &lt;strong>OR&lt;/strong> C &lt;strong>OR&lt;/strong> D are True (1).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Example: You are making a scheduler. You want to check if the timer for the current task at hand has run out &lt;strong>OR&lt;/strong> if the current task has finished so you can move on to another task. (This is one algorithm that a CPU may use schedule tasks in your computer!)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="not">NOT&lt;/h3>
&lt;p>The NOT gate (also called an inverter) can take in 1 input and invert it. The truth table for the NOT gate and its appearance in digital logic design is shown below.&lt;/p>
&lt;p>In short, if the input is a True (1), then the output is a False (0). If the input is a False (0), then the output is a True (1).&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Example: You want to invert the truth value of one variable A.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Example: You are making a game and want to check when the player in the game is alive or dead so you know to continue the game or display the &amp;ldquo;game over&amp;rdquo; message. You make a conditional statement to continue running the game while the player is &lt;strong>NOT&lt;/strong> dead.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="xor">XOR&lt;/h3>
&lt;p>The XOR gate can take any number of input greater than 1. The truth table for the XOR gate and its appearance in digital logic design is shown below. XOR stands for &amp;ldquo;exclusive or&amp;rdquo;, so one or the other but not both. The use of a XOR gate is not as common as the previous gates, but it still comes up and good to know.&lt;/p>
&lt;p>In short, the XOR gate returns/outputs a True (1), if only 1 of the inputs is True (1) and False (0) otherwise.&lt;/p>
&lt;ul>
&lt;li>Example: A server sends 4 bits to a client and calculates the XOR of the 4 bits and the result is 1 and appends this resulting bit to the 4 (now 5) bit message to the client. The client can XOR the first 4 bits and if the result of the XOR is not the same as what the 5th bit says, then the message has been corrupted in transmission. But this is not a complete check since the message can be corrupted in a way that the server and client XOR results still line up.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="opposite-gates">Opposite Gates&lt;/h3>
&lt;p>Each one of the gates above have one that is the opposite as what it is normally. The AND gate has its opposite called NAND gate. OR has NOR. NOT/NO has BUFFER/YES. XOR has XNOR. The truth tables and digital logic design for all of these gates are also below. Essentially, just take the outputs of the normal gate and invert them and that is the truth table for the corresponding opposite gate.&lt;/p>
&lt;hr>
&lt;h2 id="truth-tables">&lt;strong>Truth Tables&lt;/strong>&lt;/h2>
&lt;p>Truth tables can be tedious to make if there are a lot of inputs, but it is one of the most effective ways to visualize a problem. Similar to how Venn Diagrams are useful to help understand some set theory problems, truth tables are an excellent way to check if two statements are equivalent or not or simply evaluate an expression to see its resulting truth value.&lt;/p>
&lt;p>Here is the visual for all of the logic gates described above. Now let us see how to read it.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 600px">
&lt;img class="card-img-top" src="https://hilalmorrar.com/ucsc-guide/ucsc-guide/docs/majorguides/computerscience/discretemath/logic/gates_truth_tables_hu58c4ef95e3bb196dfc1e80ce989a0e84_21718_590x290_fill_q75_catmullrom_smart1.jpg" width="590" height="290">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
A visual guide to the common logic gates.
&lt;small class="text-muted">&lt;br/>Diagram: Proprofs.com&lt;/small>&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>(Click &lt;a href="gates_truth_tables.jpg">here&lt;/a> to download the image if you want to save it for safe keeping.)&lt;/p>
&lt;p>The $A$ and $B$ on the left columns are example inputs to the gate. Remember these can only be boolean/binary True (1)/False (0). They can the results of previously evaluated expression or a simple 1 or 0 as you see in the tables.&lt;/p>
&lt;blockquote>
&lt;p>Notice that the inputs start at all 0 and then slowly work their way to all 1 at the bottom and that all of these rows make up every single possible combination of inputs that this gate have take. These are only 2 input gates, but you can come up with the tables for more inputs or Google them.&lt;/p>
&lt;/blockquote>
&lt;p>Now, look at the table one row at a time. Those two inputs get that gate operation applied to them and then the result is in the right side column.&lt;/p>
&lt;hr>
&lt;h2 id="laws-of-logic">&lt;strong>Laws of Logic&lt;/strong>&lt;/h2>
&lt;p>This handout will be your best friend when working with logical expressions/equations that you need to evaluate or simplify. I will explain one rule on the handout so you know how to read and use it.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 881px">
&lt;img class="card-img-top" src="https://hilalmorrar.com/ucsc-guide/ucsc-guide/docs/majorguides/computerscience/discretemath/logic/logic_laws_hue400055917ee8efd2c563c4b06d436dc_87956_871x729_fill_catmullrom_smart1_2.png" width="871" height="729">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
A reference chart for the laws of logic.
&lt;small class="text-muted">&lt;br/>Diagram: math.stackexchange.com&lt;/small>&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>(Click &lt;a href="logic_laws.jpg">here&lt;/a> to download the image if you want to save it for safe keeping.)&lt;/p>
&lt;h3 id="notation-in-the-logic-laws">Notation in the Logic Laws&lt;/h3>
&lt;p>The &lt;strong>T&lt;/strong> and &lt;strong>F&lt;/strong> stand for True and False, respectively. The $p$, $q$, and $r$ used in the diagram are just variables that have boolean values. They can stand for a single variable in an equation or a piece of an expression (ex. $p$ can just be a variable in the equation as $p$ itself like how you can have $x$ in an expression in Calculus OR it can be representative for something bigger than a single variable like how you can have $x = (a + b/2)$ in Calculus). The $\equiv$ symbol means &amp;ldquo;logically equivalent&amp;rdquo; (i.e. equal to). The $\rightarrow$ symbol is called &amp;ldquo;the arrow of implication&amp;rdquo; read in an expression as &amp;ldquo;implies&amp;rdquo;. So $p \rightarrow q$ is read aloud as &amp;ldquo;$p$ implies $q$&amp;rdquo;.&lt;/p>
&lt;blockquote>
&lt;p>Note: The first one in Table 7 is called &amp;ldquo;Definition of Implication&amp;rdquo; and the first one in Table 8 is called &amp;ldquo;Definition of Equivalence/Biconditional&amp;rdquo;.&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h3 id="duals">Duals&lt;/h3>
&lt;p>Most of the logic laws have everything the same in their equations but the $\lor$ and $\land$ signs are flipped ($\lor$ becomes $\land$ and $\land$ becomes $\lor$). This operation of switching the ANDs and ORs is called &amp;ldquo;taking the dual&amp;rdquo;. In other words, one of these laws is the dual of the other (with the same name).&lt;/p>
&lt;blockquote>
&lt;p>Note: The Double Negation, Defintion of Implication, and Definition of Equivalence do not have any duals.&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h3 id="logic-law-handout-example">Logic Law Handout Example&lt;/h3>
&lt;p>Let us take a look at the Commutative Laws. Notice how there are two Commutative Laws.&lt;/p>
&lt;p>For the first Commutative Law, it says (in English): &amp;ldquo;the (truth) value of $p$ OR&amp;rsquo;ed with the (truth) value of $q$ is logically equivalent to the (truth) value of $q$ OR&amp;rsquo;ed with the (truth) value of $p$&amp;rdquo;. Notice how this is the same exact thing that you have seen before in previous math classes: $x + y = y + x$&amp;hellip; same thing!&lt;/p>
&lt;hr></description></item><item><title>Docs: Set Theory</title><link>https://hilalmorrar.com/ucsc-guide/docs/majorguides/computerscience/discretemath/settheory/</link><pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate><guid>https://hilalmorrar.com/ucsc-guide/docs/majorguides/computerscience/discretemath/settheory/</guid><description>
&lt;p>Set theory is the branch of mathematical logic that studies sets, which can be informally described as collections of objects. Founded by German mathematicians Richard Dedekind and Georg Cantor in the 1870s (&lt;a href="https://en.wikipedia.org/wiki/Set_theory">Wikipedia&lt;/a>).&lt;/p>
&lt;h2 id="definitions">&lt;strong>Definitions&lt;/strong>&lt;/h2>
&lt;h3 id="set">Set&lt;/h3>
&lt;p>A collection of objects, where order and repetition does not matter. Sets can hold any type of objects, not strictly 1 character numbers or letters.&lt;/p>
&lt;h4 id="set-notation">Set Notation&lt;/h4>
&lt;p>Sets are usually surrounded by curly braces with commas separating elements and when assigned to a variable, the convention is to use a single capital letter (although there may be exceptions).&lt;/p>
&lt;h3 id="element">Element&lt;/h3>
&lt;p>The objects inside a set.&lt;/p>
&lt;h4 id="element-notation">Element Notation&lt;/h4>
&lt;p>When you want to note a specific element from a set, you use the $\in$ symbol. When an element is not in a set, you use the $\notin$ symbol.&lt;/p>
&lt;ul>
&lt;li>Example: Written as $1 \in A$. Read/Spoken as &amp;ldquo;1 is an element of (set) A&amp;rdquo; OR &amp;ldquo;1 is a member of (set) A&amp;rdquo;.&lt;/li>
&lt;li>Example: Written as $34 \notin A$. Read/Spoken as &amp;ldquo;34 is not an element of (set) A&amp;rdquo; OR &amp;ldquo;34 is not a member of (set) A&amp;rdquo;.&lt;/li>
&lt;/ul>
&lt;h3 id="examples">Examples&lt;/h3>
&lt;p>$A = \{1, 2, 3, 4\}$. $B = \{a, b, c, d\}$. $C = \{cat, dog, cow, fox\}$.&lt;/p>
&lt;blockquote>
&lt;p>Note: If you see &amp;ldquo;$\dots$&amp;rdquo; in a set that means that it should be clear what elements come next infinitely (i.e. this is the pattern for the set and it does not end).&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="common-sets">&lt;strong>Common Sets&lt;/strong>&lt;/h2>
&lt;p>These are special sets that are used across mathematics and computer science theory (algorithms).&lt;/p>
&lt;h3 id="real-numbers">Real numbers&lt;/h3>
&lt;ul>
&lt;li>This set has any decimal number of any precision.&lt;/li>
&lt;li>Symbol: $\mathbb{R}$&lt;/li>
&lt;li>Examples: 1.0, 388.09384, 3.1415, -1005.6400009&lt;/li>
&lt;/ul>
&lt;h3 id="natural-numbers">Natural numbers&lt;/h3>
&lt;ul>
&lt;li>This set has the counting numbers that you use everyday. Depending on context, they may start with 0 or 1, so be careful.&lt;/li>
&lt;li>Symbol: $\mathbb{N}$&lt;/li>
&lt;li>Example: $\{0, 1, 2, 3, 4, \dots\}$&lt;/li>
&lt;/ul>
&lt;h3 id="integers">Integers&lt;/h3>
&lt;ul>
&lt;li>This set has any positive or negative whole number.&lt;/li>
&lt;li>Symbol: $\mathbb{Z}$&lt;/li>
&lt;li>Example: $\{\dots, -3, -2, -1, 0, 1, 2, 3, \dots\}$&lt;/li>
&lt;/ul>
&lt;h3 id="rational-numbers">Rational numbers&lt;/h3>
&lt;ul>
&lt;li>This set has the result of dividing any two integers, but not 0 in the deminator.&lt;/li>
&lt;li>Symbol: $\mathbb{Q}$&lt;/li>
&lt;li>Examples: $\frac{3}{2}, \frac{2}{4}, \frac{-24}{97}$&lt;/li>
&lt;/ul>
&lt;h3 id="empty-set">Empty set&lt;/h3>
&lt;ul>
&lt;li>This is the set that has no elements in it.&lt;/li>
&lt;li>Symbol: $\emptyset$ OR $\{\}$&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="cardinality">&lt;strong>Cardinality&lt;/strong>&lt;/h2>
&lt;h3 id="defintion">Defintion&lt;/h3>
&lt;p>The size/length of the set.&lt;/p>
&lt;h3 id="notation">Notation&lt;/h3>
&lt;p>Vertical bars around the name of the set.&lt;/p>
&lt;h3 id="examples-1">Examples&lt;/h3>
&lt;ul>
&lt;li>Let $A = \{1, 2, 3, 4\}$. The cardinality of set $A = |A| = 4$.&lt;/li>
&lt;li>Let $B = \{A, D, G, N, I, Y\}$. The cardinality of set $B = |B| = 6$.&lt;/li>
&lt;/ul>
&lt;p>Some sets are considered countable and some are considered uncountable. Simply, a set is countable if you can use the natural numbers to count the set in question. A set is uncountable if you cannout use the natural numbers to count it. There are also finite and infinite sets. A set is infinite is it has infinitely many elements and finite if it has a finite number of elements.&lt;/p>
&lt;hr>
&lt;h2 id="subsets">&lt;strong>Subsets&lt;/strong>&lt;/h2>
&lt;h3 id="definition">Definition&lt;/h3>
&lt;p>One set is a subset of another if all of the elements of one set can be found in the other.&lt;/p>
&lt;h3 id="notation-1">Notation&lt;/h3>
&lt;p>$A \subset B$ OR $A \subseteq B$. The &amp;ldquo;$\subset$&amp;rdquo; symbol is called &amp;ldquo;proper subset&amp;rdquo; and the &amp;ldquo;$\subseteq$&amp;rdquo; is called &amp;ldquo;subset&amp;rdquo;.&lt;/p>
&lt;blockquote>
&lt;p>Note: There is a little line under the symbol in the second example. This subtle difference between the two symbols is similar to $&amp;lt;$ and $\le$.&lt;/p>
&lt;/blockquote>
&lt;h3 id="example-of-proper-subset">Example of proper subset&lt;/h3>
&lt;p>Let $A = \{1, 2, 3, 4\}$ and let $B = \{1, 2, 3, 4, 5, 6, 7, 8\}$. In this case, $A \subset B$ because all of the elements in set $A$ can be found in set $B$, but $B$ has some elements that $A$ does not. That is how it is written, but when it is read/spoken, you say &amp;ldquo;(set) $A$ is a proper subset of (set) $B$&amp;rdquo;.&lt;/p>
&lt;h3 id="example-of-subset">Example of subset&lt;/h3>
&lt;p>Let $A = \{1, 2, 3, 4\}$ and let $B = \{1, 2, 3, 4\}$. In this case, $A \subseteq B$ because all of the elements in set $A$ can be found in set $B$ and the two sets happen to be the same set. That is how it is written, but when it is read/spoken, you say &amp;ldquo;(set) $A$ is a subset of (set) $B$&amp;rdquo;.&lt;/p>
&lt;h3 id="visually">Visually&lt;/h3>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 410px">
&lt;img class="card-img-top" src="https://hilalmorrar.com/ucsc-guide/ucsc-guide/docs/majorguides/computerscience/discretemath/settheory/subset_hu11dc0954674be859503d2068ba120b01_11467_400x450_fill_catmullrom_smart1_2.png" width="400" height="450">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
A visual example of subsets and proper subsets
&lt;small class="text-muted">&lt;br/>Photo: OnlineMathLearning.com&lt;/small>&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>(Click &lt;a href="subset.png">here&lt;/a> to download the image if you want to save it for safe keeping.)&lt;/p>
&lt;blockquote>
&lt;p>Note: The $U$ in the top left corner stands for the &amp;ldquo;universive of discourse&amp;rdquo;. You can think of this as the &amp;ldquo;domain&amp;rdquo; of the problem, where the universe has all possible values in a given problem.&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="power-set">&lt;strong>Power Set&lt;/strong>&lt;/h2>
&lt;h3 id="definition-1">Definition&lt;/h3>
&lt;p>A power set of a set is the set of all possible subsets that can be made from the original set.&lt;/p>
&lt;h3 id="notation-2">Notation&lt;/h3>
&lt;p>$\mathcal{P}(A)$&lt;/p>
&lt;h3 id="example">Example&lt;/h3>
&lt;p>Let $A = \{1, 2, 3\}$. $\mathcal{P}(A) = { {}, {1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, {1, 2, 3} }$.&lt;/p>
&lt;blockquote>
&lt;p>Note: A quick check to make sure you didn&amp;rsquo;t miss a set when making the power set is to count the number of sets in your power set and see if it equals $2^{|A|}$. But this isn&amp;rsquo;t a complete/exhaustive check, so make sure you get every combination.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Note: The empty set is a subset of any set and therfore in every power set.&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="common-setlogic-operations">&lt;strong>Common Set/Logic Operations&lt;/strong>&lt;/h2>
&lt;p>You can perform operations on sets. These operations are fairly common in discete math, algorithms, and logic/hardware. Some of the styles of notation may differ across these fields, but they all mean the same.&lt;/p>
&lt;h3 id="unionor">Union/OR&lt;/h3>
&lt;p>This operation is similar to an &amp;ldquo;addition&amp;rdquo; of the sets involved, like a combination. Combine the sets involved into one big set, but no duplicates. In set theory it is called &amp;ldquo;union&amp;rdquo; and in logic/hardware it is called &amp;ldquo;OR&amp;rdquo;.&lt;/p>
&lt;h4 id="notation-3">Notation&lt;/h4>
&lt;p>Set theory: $A \cup B$. Logic/hardware: $A \lor B$.&lt;/p>
&lt;h4 id="example-1">Example&lt;/h4>
&lt;p>Let $A = \{1, 2, 3\}$ and let $B = \{3, 4, 5, 6\}$. The union of sets $A$ and $B$ is $\{1, 2, 3, 4, 5, 6\}$.&lt;/p>
&lt;hr>
&lt;h3 id="intersectionand">Intersection/AND&lt;/h3>
&lt;p>This operation is finding the commonalities bewtween the sets involved. In set theory it is called &amp;ldquo;intersection&amp;rdquo; and in logic/hardware it is called &amp;ldquo;AND&amp;rdquo;.&lt;/p>
&lt;h4 id="notation-4">Notation&lt;/h4>
&lt;p>Set theory: $A \cap B$. Logic/hardware: $A \land B$.&lt;/p>
&lt;h4 id="example-2">Example&lt;/h4>
&lt;p>Let $A = \{1, 2, 3\}$ and let $B = \{3, 4, 5, 1\}$. The intersection of set $A$ and $B$ is $\{1, 3\}$.&lt;/p>
&lt;hr>
&lt;h3 id="complementnot">Complement/NOT&lt;/h3>
&lt;p>In set theory, this operation is finding what is &lt;em>not&lt;/em> in the set in question, but in logic/hardware, this operation is taking the opposite of a True/False value. This operation can be done in addition to other operations on one or more sets. It is also called a &amp;ldquo;negation&amp;rdquo;.&lt;/p>
&lt;h4 id="notation-5">Notation&lt;/h4>
&lt;p>Set theory: $A^C$. Logic/hardware: $\bar{A}$ or $A'$, or $\sim A$.&lt;/p>
&lt;h4 id="examples-2">Examples&lt;/h4>
&lt;p>Let the universe $U = \{1, 2, 3, 4, 5, 6\}$. Let $A = \{1, 2, 3\}$. Let $B = \{3, 4, 5, 1\}$.&lt;/p>
&lt;ul>
&lt;li>$A^C = \{4, 5, 6\}$&lt;/li>
&lt;li>$\overline{A \cup B} = \{6\}$&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Note: In the last example, I used a very famous law/rule called DeMorgan&amp;rsquo;s Law, which will be left up to you to Google (very simple, but incredibly powerful trick). In short, DeMorgan&amp;rsquo;s Law lets you move a negation in and out of parantheses while maintaining the correctness of the answer.&lt;/p>
&lt;/blockquote>
&lt;h3 id="visually-1">Visually&lt;/h3>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 410px">
&lt;img class="card-img-top" src="https://hilalmorrar.com/ucsc-guide/ucsc-guide/docs/majorguides/computerscience/discretemath/settheory/set_operations_hu092d676f11edc2cd5600dd2c047049ec_51782_400x460_fill_catmullrom_smart1_2.png" width="400" height="460">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
A visual example of subsets and proper subsets
&lt;small class="text-muted">&lt;br/>Photo: OnlineMathLearning.com&lt;/small>&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>(Click &lt;a href="set_operations.png">here&lt;/a> to download the image if you want to save it for safe keeping.)&lt;/p>
&lt;blockquote>
&lt;p>Note: Venn Diagrams are &lt;strong>incredibly&lt;/strong> useful to visualize some of the set operations in more complicated problems that involve more than 2 simple, small sets. So if you are having trouble wrapping your head around a problem or operation when solving a problem, draw it out!&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: House/Apartment</title><link>https://hilalmorrar.com/ucsc-guide/docs/housing/offcampus/house_apartment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hilalmorrar.com/ucsc-guide/docs/housing/offcampus/house_apartment/</guid><description>
&lt;p>I got a house close to the base of campus in Summer 2020 and this is an approximate sequence of events and resources I found (but not necessarily used) to help get a place to live.&lt;/p>
&lt;hr>
&lt;h2 id="picking-your-group">Picking Your Group&lt;/h2>
&lt;p>&lt;a href="https://communityrentals.ucsc.edu/renters/before-you-rent/index.html">UCSC Community Rentals - Before You Rent&lt;/a>&lt;/p>
&lt;p>The most important thing I would do before even starting to look for a house is to find a solid group of people to live with. Personally, I think a group of 3 - 5 people is a great middle ground for house cleanliness and fun but also somewhat private and quiet to study. Make sure you talk about everyone&amp;rsquo;s preferences, living condition/way of living, and price ranges. It is very competitive to find housing in Santa Cruz, so you want to pick a solid group who can communicate and be ready to apply to maximize chances of getting the house. You should be doing this around February.&lt;/p>
&lt;hr>
&lt;h2 id="starting-your-search">Starting Your Search&lt;/h2>
&lt;p>After you have your group picked out, have everyone in the group start searching any and all websites for house listings that match the group&amp;rsquo;s preferences, while simulateously filling out a &lt;a href="https://communityrentals.ucsc.edu/renters/before-you-rent/rental-application-packet.html">renter&amp;rsquo;s application packet&lt;/a>. Some landlords ask for it and some don&amp;rsquo;t, but it takes a little while to put together, so start early. See the link above for more information on it. This also the time to take the quick &lt;a href="https://communityrentals.ucsc.edu/renters-workshop/index.html">Canvas Renter&amp;rsquo;s Workshop&lt;/a>. Some landlords ask that you complete it and show the certificate of completion (mine did), but even if they don&amp;rsquo;t ask, there is still some good information in there about off campus housing in general. You should be doing this in February - March.&lt;/p>
&lt;hr>
&lt;h2 id="links-for-your-search">Links for Your Search&lt;/h2>
&lt;p>Here is a list of sites to search for (in no particular order, not exhaustive):&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.zillow.com/">Zillow&lt;/a> (this is where I found my house)&lt;/li>
&lt;li>&lt;a href="https://www.apartments.com/">Apartments.com&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.realtor.com/rentals">Realtor.com&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://monterey.craigslist.org/">Craigslist&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.facebook.com/groups/1454999854729837">Santa Cruz Housing Facebook Public Group&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.facebook.com/groups/ucscunofficialhousing/">UCSC Housing, Sublets &amp;amp; Roommates Facebook Private Group&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.facebook.com/groups/1450196305292286/">University of California, Santa Cruz (UCSC) Housing, Sublets &amp;amp; Roommates Facebook Private Group&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="contacting-potential-landlords">Contacting Potential Landlords&lt;/h2>
&lt;p>Keep searching all the sites you can and when you reach out to landlord via email or text (however they prefer), I would recommend only having one person communicating with the landlord and then they will convey the updates to the rest of the group - it is usually much more oragnized and less confusing to keep track of who is talking to who. You should be doing this starting in March - April.&lt;/p>
&lt;p>When you first contact a landlord to express interest in their listing, I recommend you do the following:&lt;/p>
&lt;ul>
&lt;li>quickly introduce yourself and your group - names, majors, year&lt;/li>
&lt;li>express interest in that specific listing - give the address of the place so they know which one in case they have more than one&lt;/li>
&lt;li>try to sell yourself and your group a little - make yourselves sound like good tenants (and make sure that is the reality too)&lt;/li>
&lt;li>ask about availability for a tour, applying, and signing the lease so they can get a feel that you are serious about securing this house.&lt;/li>
&lt;/ul>
&lt;p>Keep this initial email/text with the landlord SHORT. Get to the point - housing is competitive in Santa Cruz, so you don&amp;rsquo;t want to deter landlords with a long essay. Make it easier for them.&lt;/p>
&lt;blockquote>
&lt;p>Note: This process of searching for potential houses and contacting landlords usually takes a while, so be patient and keep searching. Many landlords will ghost you, leave you on read, or take a while to reply. Don&amp;rsquo;t take it personal and just move on to the next.&lt;/p>
&lt;/blockquote>
&lt;p>Pay attention to the date the house is available for new tenants if it is mentioned in the listing online. If it isn&amp;rsquo;t online you can ask about it in the initial email, but it will be in the lease. I prefer a start date/time that is anytime outside the school year in case my group doesn&amp;rsquo;t want to resign for another year or we get kicked out, we won&amp;rsquo;t be doing this whole process again while taking classes. Most leases are 12 months long, so you will be paying for the summer months rent anyway, but you can ask for a month to month lease or a term shorter than 12 months (although landlords do not prefer this).&lt;/p>
&lt;hr>
&lt;h2 id="reading-the-lease">Reading the Lease&lt;/h2>
&lt;p>After engaging in talks with landlord and you seem to have a place that will be yours, the landlord will send you the lease and give you a little bit of time to read and sign it. Please read the lease completely.&lt;/p>
&lt;blockquote>
&lt;p>Note: Look for contradictions, unfair rules, things that stand out or don&amp;rsquo;t make sense, and ask for clarification. Make sure you, your group, and the landlord are all in agreement about the terms of the lease BEFORE signing. If you don&amp;rsquo;t read the whole thing, then at the very least, read the first couple pages since that is where the main points are usually.&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="move-in-and-things-to-set-up">Move In and Things to Set Up&lt;/h2>
&lt;p>Next is to pay your (refundable) safety deposit, get the keys, and move in! Congratulations! Some houses are prefunished, but I would say most are not. So figure out if anything comes with the house and fill in the missing furniture or appliances with your group.&lt;/p>
&lt;p>Read the terms of your lease to remember what utilities (PG&amp;amp;E, water, trash, cable/internet) you are and not responsible for paying and get those set up. I would say that usually one person takes responsiblilty to pay for one utility to make it fair and everyone pays them back.&lt;/p>
&lt;blockquote>
&lt;p>Note: start setting up the utilities (especially internet) as soon as you get the keys to make sure you have a smooth start.&lt;/p>
&lt;/blockquote>
&lt;p>Be a good housemate, roommate, neighbor, and tenant. It isn&amp;rsquo;t technically your house, but you should be treating as if it is (or risk losing a lot of your safety deposit)!&lt;/p>
&lt;hr>
&lt;h2 id="more-resources">More resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://communityrentals.ucsc.edu/">Community Rentals&lt;/a> - (ucsc site) has many more links and resources to help&lt;/li>
&lt;li>&lt;a href="https://www.places4students.com/Places/School?SchoolID=%2f7UnHPDakTw%3d">Places4Students&lt;/a> - place to find rentals and housemates&lt;/li>
&lt;li>&lt;a href="https://deanofstudents.ucsc.edu/basic-needs/off-campus-housing-legal-services.html">Legal Services &amp;amp; Consulation&lt;/a> - free access to an attorney for UCSC students if you have legal concerns regarding off campus housing (offered via UCSC Dean of Students)&lt;/li>
&lt;li>&lt;a href="https://communityrentals.ucsc.edu/renters/before-you-rent/questions-to-ask.html">Community Rentals - Questions to Ask&lt;/a> - questions to ask the landlord&lt;/li>
&lt;/ul></description></item><item><title>Docs: University Town Center</title><link>https://hilalmorrar.com/ucsc-guide/docs/housing/offcampus/utc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hilalmorrar.com/ucsc-guide/docs/housing/offcampus/utc/</guid><description/></item><item><title>Docs: How Git Works</title><link>https://hilalmorrar.com/ucsc-guide/docs/majorguides/computerscience/git/fundamentals/how_git_works/</link><pubDate>Wed, 15 Sep 2021 00:00:00 +0000</pubDate><guid>https://hilalmorrar.com/ucsc-guide/docs/majorguides/computerscience/git/fundamentals/how_git_works/</guid><description>
&lt;p>In the last article, we talked about what version control was. Now, we&amp;rsquo;re going to cover how Git implements it.&lt;/p>
&lt;p>Note: As stated in &lt;a href="../">Fundamentals&lt;/a>, it&amp;rsquo;s okay if you don&amp;rsquo;t understand the stuff covered in here immediately. Read through the article then go to &lt;a href="../../basics/">Basics&lt;/a>, rereading this article as necessary.&lt;/p>
&lt;h2 id="fundamentals-of-git">Fundamentals of Git&lt;/h2>
&lt;p>Git is a version control system which allows you to log changes made, reasons behind them, push these changes to replicate it in an external place, pull in changes from that external place to other places like another device, and more.&lt;/p>
&lt;h2 id="repositories-repos">Repositories (Repos)&lt;/h2>
&lt;p>A repository, or repo, is a collection files and directories (folders) in which changes can be made. Most Git repos are used for storing a unit of software, like a program. Repos stored in different places are called different things. A local repo is one that is on your own computer/device while a remote repo is one that is on an external server. These external servers can be hosted by various places. For example, UCSC hosts a GitLab server, which implements Git. However, they can also be places like GitHub or GitLab&amp;rsquo;s own servers rather than something self-hosted like the school&amp;rsquo;s servers on.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 500px">
&lt;img class="card-img-top" src="../git-bash-console.png" width="581" height="476">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
An example of how to interact with a local repository.
&lt;small class="text-muted">&lt;br>Photo: Git Bash Windows console&lt;/small>
&lt;/p>
&lt;/div>
&lt;/div>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 1625px">
&lt;img class="card-img-top" src="../burdbot-repo.png" width="1625" height="631">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
An example of a remote repository on Github.
&lt;small class="text-muted">&lt;br>Photo: github.com&lt;/small>
&lt;/p>
&lt;/div>
&lt;/div>
&lt;h3 id="creating-repositories">Creating repositories&lt;/h3>
&lt;p>We won&amp;rsquo;t get into exactly how to do anything until &lt;a href="../../basics/basic_git_operations">Basic Git Operations&lt;/a>, but we&amp;rsquo;ll describe the the process for now. There are two main ways to create a local repo. The first is to clone it from an existing repo, usually a remote one. The other is to initialize it using the command line. How to create a remote repo depends on where the repo is stored. When it comes to a repo for classes, they will generally be pre-made on the school&amp;rsquo;s GitLab server and shared with you. However, you can also create repos by navigating to the website and using it to create one, which is also the same way to create a remote repo on sites like &lt;a href="https://github.com">GitHub&lt;/a> and &lt;a href="https://gitlab.com/users/sign_in">GitLab&lt;/a>.&lt;/p>
&lt;h2 id="making-changes-to-repositories">Making changes to repositories&lt;/h2>
&lt;p>As stated earlier, version control provides a way to track changes made. The way Git implements this is through something called commits, commit history, and branches. Commits made on local repos can be pushed to remote repos so that they&amp;rsquo;re replicated. We&amp;rsquo;ll explain this in further detail in &lt;a href="../../basics/basic_git_operations">Basic Git Operations&lt;/a>, but this system of being able to make local repositories by cloning remote repositories and pushing changes to transfer them to a remote repo creates redundancies so that your changes persist even if your device&amp;rsquo;s HDD or SSD fail.&lt;/p>
&lt;h3 id="commits">Commits&lt;/h3>
&lt;p>Commits are a unit of changes to a file or batch of files labelled with a title and description. In Git, every individual commit stores changes made from the previous commit, building on top of them instead of storing the entire repo&amp;rsquo;s state. We will go over how to create them in &lt;a href="../../basics/basic_git_operations">Basic Git Operations&lt;/a>.&lt;/p>
&lt;h3 id="commit-history">Commit History&lt;/h3>
&lt;p>As the name suggests, commit history is made up of past commits. Because each commit builds off of the last one, the visible commit history must be linear within a given branch (explained below) so it leads from the original state to the current state.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 600px">
&lt;img class="card-img-top" src="../burdbot-repo-commit-log.png" width="786" height="976">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
An example of the commit history of a repo.
&lt;small class="text-muted">&lt;br>Photo: Git Bash Windows console&lt;/small>
&lt;/p>
&lt;/div>
&lt;/div>
&lt;h3 id="branches">Branches&lt;/h3>
&lt;p>By default, all repos created have one branch, the main or master branch. A branch consists of a series of commits and new ones can be created by branching off from another branch. There are many operations that can be done with branches, but we won&amp;rsquo;t be getting into them because they&amp;rsquo;re not needed for the lower division courses.&lt;/p>
&lt;h2 id="getting-git-on-a-local-computer">Getting Git on a local computer&lt;/h2>
&lt;p>To actually use Git on your computer, you first need to get it. If you&amp;rsquo;re in or going into CSE 12/L, you&amp;rsquo;ll need to use Git for Windows. If you&amp;rsquo;re in or going into CSE 13, you&amp;rsquo;ll be using Ubuntu. Ubuntu and MacOS in most cases should both come with Git by default. However, if you&amp;rsquo;re on Windows, this isn&amp;rsquo;t the case. If the &lt;code>Git&lt;/code> command isn&amp;rsquo;t available via the command line, download it from &lt;a href="https://git-scm.com/downloads">here&lt;/a>.&lt;/p>
&lt;h2 id="making-an-account-for-remote-repositories">Making an account for remote repositories&lt;/h2>
&lt;p>Now that we&amp;rsquo;ve covered what repos and commits are, it&amp;rsquo;s time to do some set-up prior to actually using Git.&lt;/p>
&lt;p>To make an account for school-related remote repos which you&amp;rsquo;ll use in many computer science classes, go to the &lt;a href="https://git.ucsc.edu">school&amp;rsquo;s self-hosted GitLab site&lt;/a>. When creating a school account, do not use another site like GitLab directly or GitHub. Use your school email for the email, Cruz ID for your username, and make a password to register.&lt;/p>
&lt;p>If you want to create an account on a site hosting remote repositories to put personal projects in to using Git, use a site like &lt;a href="https://github.com">GitHub&lt;/a> or &lt;a href="https://gitlab.com/users/sign_in">GitLab&lt;/a>.&lt;/p>
&lt;hr>
&lt;p>Once you create an account, go to the next article, which will explain how to set up an SSH key for Git so that you can push and pull changes to/from the remote repository without having to authenticate using your password.&lt;/p>
&lt;p>Note: There are a lot more features Git has to provide apart from the ones listed in this article. As mentioned in &lt;a href="../../">Git&lt;/a>, the primary purpose of these articles is have enough knowledge about Git to get through the lower division courses.&lt;/p></description></item><item><title>Docs: SSH Keys</title><link>https://hilalmorrar.com/ucsc-guide/docs/majorguides/computerscience/git/fundamentals/ssh_keys/</link><pubDate>Wed, 15 Sep 2021 00:00:00 +0000</pubDate><guid>https://hilalmorrar.com/ucsc-guide/docs/majorguides/computerscience/git/fundamentals/ssh_keys/</guid><description>
&lt;p>In the last article, you got Git on your computer if it wasn&amp;rsquo;t already installed and created an account for Git on either the school&amp;rsquo;s or some other remote repo site. There is one more optional but highly recommended step we must go through before actually using Git, setting up an SSH key.&lt;/p>
&lt;h2 id="background">Background&lt;/h2>
&lt;p>When interacting with a remote repo, you must authenticate yourself so that the remote repo hosts know you really are who you say you are. This is because it would be a huge security flaw if anyone could modify anyone&amp;rsquo;s repo without the proper permissions.&lt;/p>
&lt;p>There are two protocols that can be used to do this in Git, HTTPS and SSH. In the simplest terms, a protocol is a way something gets done. HTTPS and SSH are both cryptographically secure ways to transmit data from one point to another (the servers hosting the remote repo to your computer and vice-versa in this case) through the Internet. You likely have seen HTTPS before at the beginning of URLs because this is one of the main protocols used to send data from you to a website and vice-versa. The reason why it&amp;rsquo;s recommended to use SSH over HTTPS is that when authenticating over HTTPS, you have to type your username and password of the account you made on the site of the remote repo host, which can be quite inconvenient. This is as opposed to SSH where you&amp;rsquo;re authenticated automatically once you set it up.&lt;/p>
&lt;p>To do this, you must generate an SSH key pair, one public key and one private key. Afterwards, you must store the keys on your computer, and give the remote repo host a copy of the public key. The private key is sensitive because it&amp;rsquo;s used for authentication purposes so keep it safe and don&amp;rsquo;t give it out.&lt;/p>
&lt;h2 id="generating-ssh-keys-and-storing-them-on-your-device">Generating SSH keys and storing them on your device&lt;/h2>
&lt;p>If you&amp;rsquo;re using Windows, open Git Bash. If you&amp;rsquo;re on a Mac or Linux, open Terminal. Then, type &lt;code>ssh-keygen -t RSA -b 4096&lt;/code>. This will generate a public and private SSH key using RSA-4096 as the encryption algorithm.&lt;/p>
&lt;p>You will then be prompted for where to store the private key file. Press Enter/Return so that it gets stored in the default place. If it&amp;rsquo;s asking whether to overwrite a file called &lt;code>id_rsa&lt;/code> or not, then type N, press enter/return, and skip to the &lt;a href="#giving-the-public-key-to-the-remote-repo-host">Giving the public key to the remote repo host&lt;/a>.&lt;/p>
&lt;p>After this, you will be prompted to create a passphrase. As an added security measure, SSH private keys can be further protected with a passphrase. However, if you&amp;rsquo;re using a personal computer and it&amp;rsquo;s just for school or personal projects, you can just press enter and leave the passphrase blank because it isn&amp;rsquo;t much of a concern in that case.&lt;/p>
&lt;p>Now that the public/private key pair is generated, we will now need to give the public key to the remote repo host, allowing us to authenticate automatically.&lt;/p>
&lt;h2 id="giving-the-public-key-to-the-remote-repo-host">Giving the public key to the remote repo host&lt;/h2>
&lt;p>This next step depends on what host is being used, such as Gitlab, the school&amp;rsquo;s self-hosted GitLab server, or GitHub, but it&amp;rsquo;s all generally the same process. First, go to your account settings/preferences on the remote repo site. Then, find the settings tab/page for SSH keys.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 700px">
&lt;img class="card-img-top" src="../ssh-keys-github.png" width="1096" height="840">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
What the SSH Keys section in the settings for GitHub look like
&lt;small class="text-muted">&lt;br>Photo: github.com&lt;/small>
&lt;/p>
&lt;/div>
&lt;/div>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 900px">
&lt;img class="card-img-top" src="../ssh-keys-gitlab.png" width="1594" height="854">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
What the SSH Keys section in the settings for GitLab look like
&lt;small class="text-muted">&lt;br>Photo: gitlab.com&lt;/small>
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>[picture of GitHub SSH settings]
[picture of GitLab SSH settings]&lt;/p>
&lt;p>Once the page is open, navigate to the user directory by typing &lt;code>cd ~&lt;/code> into Git Bash on Windows or Terminal for Mac and Linux.&lt;/p>
&lt;p>Then, if you&amp;rsquo;re on Windows, type &lt;code>cat id_rsa.pub | clip&lt;/code>.&lt;/p>
&lt;p>If you&amp;rsquo;re in Mac, type
&lt;code>cat id_rsa.pub | pbcopy&lt;/code>.&lt;/p>
&lt;p>If you&amp;rsquo;re on Linux, then type
&lt;code>cat id_rsa.pub&lt;/code>
and find the shortcut to copy the output from Terminal, including the lines marking the beginning and end of the key.&lt;/p>
&lt;p>It is extremely important that you type it &lt;strong>with&lt;/strong> the &lt;code>.pub&lt;/code> extension to copy the public key. Once it&amp;rsquo;s copied paste the key into the appropriate text-box on the SSH key settings page in your browser, setting the expiration date to never if there is an option for that and give the key a title telling what device the key is for. When you&amp;rsquo;ve typed all the information, add the key.&lt;/p>
&lt;hr>
&lt;p>This concludes this group of articles. The next group of articles, &lt;a href="../../basics/">Basics&lt;/a>, will talk about how to do many of the operations that were described in &lt;a href="../how_git_works/">How Git Works&lt;/a>.&lt;/p></description></item><item><title>Docs: Contribution Guidelines</title><link>https://hilalmorrar.com/ucsc-guide/docs/contribution_guidelines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hilalmorrar.com/ucsc-guide/docs/contribution_guidelines/</guid><description>
&lt;p>Hello and thank you for wanting to contribute to the project! All experience levels are welcome! Please take a look at &lt;code>HELPWANTED.md&lt;/code> to see items that are outside of the current team&amp;rsquo;s expertise that need help to expand the scope of the project.&lt;/p>
&lt;p>The Unofficial UCSC Student Guide is an open source project and welcome to patches, contributions, and improvements!&lt;/p>
&lt;p>The Guide lives on &lt;a href="https://github.com/hamorrar/ucsc-guide">GitHub&lt;/a>. You can view all of its source code there.&lt;/p>
&lt;hr>
&lt;h3 id="for-those-inexperienced-with-programming">For those inexperienced with programming:&lt;/h3>
&lt;h4 id="create-an-issue">&lt;strong>Create an issue&lt;/strong>&lt;/h4>
&lt;p>If there&amp;rsquo;s something you&amp;rsquo;d like to see in The Guide (or if you&amp;rsquo;ve found something that isn&amp;rsquo;t working the way you&amp;rsquo;d expect), but you&amp;rsquo;re not sure how to fix it yourself, please create an &lt;a href="https://github.com/hamorrar/ucsc-guide/issues">issue&lt;/a> or contact Hilal via email (&lt;a href="mailto:hamorrar@ucsc.edu">hamorrar@ucsc.edu&lt;/a>) or Discord (hmorrar#1632).&lt;/p>
&lt;hr>
&lt;h3 id="for-those-experienced-with-programming">For those experienced with programming:&lt;/h3>
&lt;h4 id="initial-setup">&lt;strong>Initial setup&lt;/strong>&lt;/h4>
&lt;p>The guide uses the &lt;a href="https://github.com/gohugoio/hugo/releases">extended version of hugo&lt;/a> with the &lt;a href="https://www.docsy.dev/docs/getting-started/">Docsy theme&lt;/a>.&lt;/p>
&lt;ol>
&lt;li>Install Git.&lt;/li>
&lt;li>Install Node (and its dependencies if on Windows).&lt;/li>
&lt;li>Download and install the extended version of Hugo (linked above). You can also use &lt;code>snap&lt;/code> to install the extended version of Hugo with &lt;code>sudo snap install hugo --channel=extended&lt;/code>. &lt;code>snap&lt;/code> works with a lot of Linux distros, and is pre-installed with some major distros such as Ubuntu 16.04+.&lt;/li>
&lt;li>Fork the repository on GitHub.&lt;/li>
&lt;li>Use the recursive tag when cloning your fork so that all the submodules are also downloaded: &lt;code>git clone --recursive git@github.com:your-username/ucsc-guide.git&lt;/code>&lt;/li>
&lt;li>&lt;code>cd ucsc-guide&lt;/code> to navigate into the project.&lt;/li>
&lt;li>Install all the dependencies: &lt;code>npm install&lt;/code>.&lt;/li>
&lt;li>Use the &lt;code>hugo serve&lt;/code> or &lt;code>hugo server&lt;/code> command to start the server. If you would like to expose the website to your network, use &lt;code>hugo serve --bind 0.0.0.0&lt;/code> or &lt;code>hugo server --bind 0.0.0.0&lt;/code>. This is useful for accessing the site from another machine when you are using a GUI-less OS to run the site.&lt;/li>
&lt;li>Open a browser and go to &lt;code>https://localhost:1313/ucsc-guide&lt;/code>.&lt;/li>
&lt;/ol>
&lt;h4 id="notes-for-hugo-development">&lt;strong>Notes for Hugo development&lt;/strong>&lt;/h4>
&lt;p>The repository looks a bit intimidating at first, but most of it is all set up from Hugo initially. Most of the work will be done in the &lt;code>/content/en/docs&lt;/code> directory to write up articles in Markdown. When previewing changes locally, be careful of the &lt;code>draft&lt;/code> value in the top of the Markdown file you are working in. If it is set to &lt;code>true&lt;/code>, it will not show up in the final build, but it will show up in a preview only if you use the &lt;code>-D&lt;/code> flag in when starting the local server. Every article page you want to write has to have those preamble lines (Hugo calls it &amp;ldquo;front matter&amp;rdquo;) at the top for it to render correctly (or at all). You can copy and paste from another file and modify the appropriate fields.&lt;/p>
&lt;ul>
&lt;li>&lt;code>title&lt;/code> is the title of the article&lt;/li>
&lt;li>&lt;code>linkTitle&lt;/code> is what will show up in the left navigation bar&lt;/li>
&lt;li>&lt;code>author&lt;/code> is the author of the article&lt;/li>
&lt;li>&lt;code>date&lt;/code> is the date the article was written in YYYY-MM-DD format&lt;/li>
&lt;li>&lt;code>weight&lt;/code> is for ordering the pages in the directory for the left navigation bar&lt;/li>
&lt;li>&lt;code>icon&lt;/code> is if you want to put an emote next to the title in the left navigation bar from &lt;a href="https://fontawesome.com/v5.15/icons?d=gallery&amp;amp;p=2">Font Awesome&lt;/a>&lt;/li>
&lt;li>&lt;code>draft&lt;/code> is to publish the file on the site if it is in the main branch (&lt;code>false&lt;/code> - not a draft. &lt;code>true&lt;/code> - is a draft)&lt;/li>
&lt;li>&lt;code>description&lt;/code> is a quick one line summary/preview/subtitle for the article to display under the main title on the page&lt;/li>
&lt;/ul>
&lt;h4 id="create-a-pull-request-and-preview-locally">&lt;strong>Create a pull request and preview locally&lt;/strong>&lt;/h4>
&lt;p>Continue with the usual GitHub workflow to edit files, commit them, push the changes up to your fork, and create a pull request. For more general information on how to contribute to open source projects, check out &lt;a href="https://opensource.guide/how-to-contribute/">Open Source Guides&lt;/a>. Please follow similar writing style in new contributions.&lt;/p>
&lt;p>Steps to contribute:&lt;/p>
&lt;ol>
&lt;li>Fork the repository.&lt;/li>
&lt;li>Clone your fork to your machine.&lt;/li>
&lt;li>Create or checkout an/the appropriate branch.&lt;/li>
&lt;li>Commit your changes.&lt;/li>
&lt;li>Push to your fork of the repo.&lt;/li>
&lt;li>Make a Pull Request for review.&lt;/li>
&lt;/ol>
&lt;h4 id="conventions">&lt;strong>Conventions&lt;/strong>&lt;/h4>
&lt;p>When creating or editing pages, we follow certain conventions to ensure consistency across the codebase and articles. These conventions are listed below.&lt;/p>
&lt;p>Conventions:&lt;/p>
&lt;ol>
&lt;li>Folders and subfolders within &lt;code>/content/en/docs&lt;/code> are to be &lt;code>PascalCase&lt;/code>.&lt;/li>
&lt;li>Files within &lt;code>/content/en/docs&lt;/code> and its subfolders are to be &lt;code>snake_case&lt;/code>. An exception to this convention is index files. Index files should be named &lt;code>_index.md&lt;/code>.&lt;/li>
&lt;li>Article titles are to be &lt;code>Title Case&lt;/code>.&lt;/li>
&lt;li>Article subheadings are to be &lt;code>Sentence case&lt;/code>.&lt;/li>
&lt;li>Commit messages are to be descriptive. They must describe the commit accurately and concisely.&lt;/li>
&lt;/ol>
&lt;h4 id="code-reviews">&lt;strong>Code reviews&lt;/strong>&lt;/h4>
&lt;p>Submissions will be reviewed by at least one person (Hilal). We use GitHub pull requests for this purpose. Consult &lt;a href="https://help.github.com/articles/about-pull-requests/">GitHub Help&lt;/a> for more information on using pull requests.&lt;/p>
&lt;hr>
&lt;h3 id="code-of-conduct">Code of conduct&lt;/h3>
&lt;p>This project follows the &lt;a href="https://github.com/hamorrar/ucsc-guide/blob/main/CODE_OF_CONDUCT.md">Contributor Covenant Code of Conduct&lt;/a>.&lt;/p>
&lt;h3 id="license">License&lt;/h3>
&lt;p>By contributing, you agree that your contributions will be licensed under the GNU General Public License v3.0 license.&lt;/p></description></item></channel></rss>